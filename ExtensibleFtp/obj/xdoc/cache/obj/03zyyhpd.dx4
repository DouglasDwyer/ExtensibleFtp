id: ExtensibleFtp
language: CSharp
name:
  Default: ExtensibleFtp
qualifiedName:
  Default: ExtensibleFtp
type: Assembly
modifiers: {}
items:
- id: DouglasDwyer.ExtensibleFtp
  commentId: N:DouglasDwyer.ExtensibleFtp
  language: CSharp
  name:
    CSharp: DouglasDwyer.ExtensibleFtp
    VB: DouglasDwyer.ExtensibleFtp
  nameWithType:
    CSharp: DouglasDwyer.ExtensibleFtp
    VB: DouglasDwyer.ExtensibleFtp
  qualifiedName:
    CSharp: DouglasDwyer.ExtensibleFtp
    VB: DouglasDwyer.ExtensibleFtp
  type: Namespace
  assemblies:
  - ExtensibleFtp
  modifiers: {}
  items:
  - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector
    commentId: T:DouglasDwyer.ExtensibleFtp.ActiveDataConnector
    language: CSharp
    name:
      CSharp: ActiveDataConnector
      VB: ActiveDataConnector
    nameWithType:
      CSharp: ActiveDataConnector
      VB: ActiveDataConnector
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.ActiveDataConnector
      VB: DouglasDwyer.ExtensibleFtp.ActiveDataConnector
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp
    source:
      id: ActiveDataConnector
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ActiveDataConnector.cs
      startLine: 12
    summary: "\nRepresents an &quot;active&quot; data connector, which creates data connections by connecting to a port on clients&apos; machines.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ActiveDataConnector : IDataConnector, IDisposable'
        VB: >-
          Public Class ActiveDataConnector

              Implements IDataConnector, IDisposable
    inheritance:
    - System.Object
    implements:
    - DouglasDwyer.ExtensibleFtp.IDataConnector
    - System.IDisposable
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ConnectionEndpoint
      commentId: P:DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ConnectionEndpoint
      language: CSharp
      name:
        CSharp: ConnectionEndpoint
        VB: ConnectionEndpoint
      nameWithType:
        CSharp: ActiveDataConnector.ConnectionEndpoint
        VB: ActiveDataConnector.ConnectionEndpoint
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ConnectionEndpoint
        VB: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ConnectionEndpoint
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: ConnectionEndpoint
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ActiveDataConnector.cs
        startLine: 17
      summary: "\nThe endpoint to connect to when creating data connections.\n"
      example: []
      syntax:
        content:
          CSharp: public IPEndPoint ConnectionEndpoint { get; }
          VB: Public ReadOnly Property ConnectionEndpoint As IPEndPoint
        parameters: []
        return:
          type: System.Net.IPEndPoint
      overload: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ConnectionEndpoint*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.#ctor(System.Net.IPEndPoint)
      commentId: M:DouglasDwyer.ExtensibleFtp.ActiveDataConnector.#ctor(System.Net.IPEndPoint)
      language: CSharp
      name:
        CSharp: ActiveDataConnector(IPEndPoint)
        VB: ActiveDataConnector(IPEndPoint)
      nameWithType:
        CSharp: ActiveDataConnector.ActiveDataConnector(IPEndPoint)
        VB: ActiveDataConnector.ActiveDataConnector(IPEndPoint)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ActiveDataConnector(System.Net.IPEndPoint)
        VB: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ActiveDataConnector(System.Net.IPEndPoint)
      type: Constructor
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: .ctor
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ActiveDataConnector.cs
        startLine: 24
      summary: "\nCreates a new active data connector with the specified endpoint.\n"
      example: []
      syntax:
        content:
          CSharp: public ActiveDataConnector(IPEndPoint connectionEndpoint)
          VB: Public Sub New(connectionEndpoint As IPEndPoint)
        parameters:
        - id: connectionEndpoint
          type: System.Net.IPEndPoint
          description: The endpoint that should be connected to when creating data connections.
      overload: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.CreateDataConnectionAsync
      commentId: M:DouglasDwyer.ExtensibleFtp.ActiveDataConnector.CreateDataConnectionAsync
      language: CSharp
      name:
        CSharp: CreateDataConnectionAsync()
        VB: CreateDataConnectionAsync()
      nameWithType:
        CSharp: ActiveDataConnector.CreateDataConnectionAsync()
        VB: ActiveDataConnector.CreateDataConnectionAsync()
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.CreateDataConnectionAsync()
        VB: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.CreateDataConnectionAsync()
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: CreateDataConnectionAsync
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ActiveDataConnector.cs
        startLine: 33
      summary: "\nCreates a new data connection.\n"
      example: []
      syntax:
        content:
          CSharp: public Task<TcpClient> CreateDataConnectionAsync()
          VB: Public Function CreateDataConnectionAsync As Task(Of TcpClient)
        return:
          type: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
          description: A <xref href="System.Net.Sockets.TcpClient" data-throw-if-not-resolved="false"></xref> that can be used to transfer data.  The client should be disposed when no longer in use.
      overload: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.CreateDataConnectionAsync*
      implements:
      - DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.Net.Sockets.TcpClient: 
    - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.Dispose
      commentId: M:DouglasDwyer.ExtensibleFtp.ActiveDataConnector.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ActiveDataConnector.Dispose()
        VB: ActiveDataConnector.Dispose()
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.Dispose()
        VB: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.Dispose()
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: Dispose
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ActiveDataConnector.cs
        startLine: 43
      summary: "\nDisposes the connector, closing any active data connections in the process.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.Dispose*
      implements:
      - System.IDisposable.Dispose
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: DouglasDwyer.ExtensibleFtp.IDataConnector
    commentId: T:DouglasDwyer.ExtensibleFtp.IDataConnector
    language: CSharp
    name:
      CSharp: IDataConnector
      VB: IDataConnector
    nameWithType:
      CSharp: IDataConnector
      VB: IDataConnector
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.IDataConnector
      VB: DouglasDwyer.ExtensibleFtp.IDataConnector
    type: Interface
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp
    source:
      id: IDataConnector
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\DataConnector.cs
      startLine: 10
    summary: "\nRepresents a factory used for generating data connections.\n"
    example: []
    syntax:
      content:
        CSharp: 'public interface IDataConnector : IDisposable'
        VB: >-
          Public Interface IDataConnector

              Inherits IDisposable
    inheritedMembers:
    - System.IDisposable.Dispose
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync
      commentId: M:DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync
      language: CSharp
      name:
        CSharp: CreateDataConnectionAsync()
        VB: CreateDataConnectionAsync()
      nameWithType:
        CSharp: IDataConnector.CreateDataConnectionAsync()
        VB: IDataConnector.CreateDataConnectionAsync()
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync()
        VB: DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync()
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: CreateDataConnectionAsync
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\DataConnector.cs
        startLine: 16
      summary: "\nCreates a new data connection.\n"
      example: []
      syntax:
        content:
          CSharp: Task<TcpClient> CreateDataConnectionAsync()
          VB: Function CreateDataConnectionAsync As Task(Of TcpClient)
        return:
          type: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
          description: A <xref href="System.Net.Sockets.TcpClient" data-throw-if-not-resolved="false"></xref> that can be used to transfer data.  The client should be disposed when no longer in use.
      overload: DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync*
      modifiers:
        CSharp: []
        VB: []
      references:
        System.Net.Sockets.TcpClient: 
  - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer
    commentId: T:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer
    language: CSharp
    name:
      CSharp: ExtensibleFtpServer
      VB: ExtensibleFtpServer
    nameWithType:
      CSharp: ExtensibleFtpServer
      VB: ExtensibleFtpServer
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer
      VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp
    source:
      id: ExtensibleFtpServer
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpServer.cs
      startLine: 16
    summary: "\nActs as a server which facilitates interaction between remote users and the host filesystem through the FTP protocol.\n"
    example: []
    syntax:
      content:
        CSharp: public sealed class ExtensibleFtpServer
        VB: Public NotInheritable Class ExtensibleFtpServer
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.DefaultCommandSet
      commentId: F:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.DefaultCommandSet
      language: CSharp
      name:
        CSharp: DefaultCommandSet
        VB: DefaultCommandSet
      nameWithType:
        CSharp: ExtensibleFtpServer.DefaultCommandSet
        VB: ExtensibleFtpServer.DefaultCommandSet
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.DefaultCommandSet
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.DefaultCommandSet
      type: Field
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: DefaultCommandSet
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpServer.cs
        startLine: 21
      summary: "\nThe default list of FTP commands to use when instantiating new instances of <xref href=\"DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer\" data-throw-if-not-resolved=\"false\"></xref>.  It contains all the basic commands necessary for FTP transactions.\n"
      example: []
      syntax:
        content:
          CSharp: public static List<FtpCommand> DefaultCommandSet
          VB: Public Shared DefaultCommandSet As List(Of FtpCommand)
        return:
          type: System.Collections.Generic.List{DouglasDwyer.ExtensibleFtp.FtpCommand}
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer: 
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Authenticator
      commentId: P:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Authenticator
      language: CSharp
      name:
        CSharp: Authenticator
        VB: Authenticator
      nameWithType:
        CSharp: ExtensibleFtpServer.Authenticator
        VB: ExtensibleFtpServer.Authenticator
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Authenticator
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Authenticator
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: Authenticator
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpServer.cs
        startLine: 46
      summary: "\nThe object which manages the authentication of users attempting to log into the FTP system.\n"
      example: []
      syntax:
        content:
          CSharp: public IFtpAuthenticator Authenticator { get; }
          VB: Public ReadOnly Property Authenticator As IFtpAuthenticator
        parameters: []
        return:
          type: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Authenticator*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.CommandSet
      commentId: P:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.CommandSet
      language: CSharp
      name:
        CSharp: CommandSet
        VB: CommandSet
      nameWithType:
        CSharp: ExtensibleFtpServer.CommandSet
        VB: ExtensibleFtpServer.CommandSet
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.CommandSet
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.CommandSet
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: CommandSet
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpServer.cs
        startLine: 50
      summary: "\nThe command set that this FTP server is currently using.\n"
      example: []
      syntax:
        content:
          CSharp: public IList<FtpCommand> CommandSet { get; }
          VB: Public ReadOnly Property CommandSet As IList(Of FtpCommand)
        parameters: []
        return:
          type: System.Collections.Generic.IList{DouglasDwyer.ExtensibleFtp.FtpCommand}
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.CommandSet*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.OnlineUsers
      commentId: P:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.OnlineUsers
      language: CSharp
      name:
        CSharp: OnlineUsers
        VB: OnlineUsers
      nameWithType:
        CSharp: ExtensibleFtpServer.OnlineUsers
        VB: ExtensibleFtpServer.OnlineUsers
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.OnlineUsers
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.OnlineUsers
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: OnlineUsers
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpServer.cs
        startLine: 54
      summary: "\nA list of users currently logged into the server.\n"
      example: []
      syntax:
        content:
          CSharp: public IList<ExtensibleFtpUser> OnlineUsers { get; }
          VB: Public ReadOnly Property OnlineUsers As IList(Of ExtensibleFtpUser)
        parameters: []
        return:
          type: System.Collections.Generic.IList{DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser}
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.OnlineUsers*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.#ctor(DouglasDwyer.ExtensibleFtp.IFtpAuthenticator)
      commentId: M:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.#ctor(DouglasDwyer.ExtensibleFtp.IFtpAuthenticator)
      language: CSharp
      name:
        CSharp: ExtensibleFtpServer(IFtpAuthenticator)
        VB: ExtensibleFtpServer(IFtpAuthenticator)
      nameWithType:
        CSharp: ExtensibleFtpServer.ExtensibleFtpServer(IFtpAuthenticator)
        VB: ExtensibleFtpServer.ExtensibleFtpServer(IFtpAuthenticator)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.ExtensibleFtpServer(DouglasDwyer.ExtensibleFtp.IFtpAuthenticator)
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.ExtensibleFtpServer(DouglasDwyer.ExtensibleFtp.IFtpAuthenticator)
      type: Constructor
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: .ctor
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpServer.cs
        startLine: 65
      summary: "\nCreates a new <xref href=\"DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified authenticator.\n"
      example: []
      syntax:
        content:
          CSharp: public ExtensibleFtpServer(IFtpAuthenticator authenticator)
          VB: Public Sub New(authenticator As IFtpAuthenticator)
        parameters:
        - id: authenticator
          type: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator
          description: An FTP authenticator which manages user identities.
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer: 
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.#ctor(DouglasDwyer.ExtensibleFtp.IFtpAuthenticator,System.Collections.Generic.List{DouglasDwyer.ExtensibleFtp.FtpCommand})
      commentId: M:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.#ctor(DouglasDwyer.ExtensibleFtp.IFtpAuthenticator,System.Collections.Generic.List{DouglasDwyer.ExtensibleFtp.FtpCommand})
      language: CSharp
      name:
        CSharp: ExtensibleFtpServer(IFtpAuthenticator, List<FtpCommand>)
        VB: ExtensibleFtpServer(IFtpAuthenticator, List(Of FtpCommand))
      nameWithType:
        CSharp: ExtensibleFtpServer.ExtensibleFtpServer(IFtpAuthenticator, List<FtpCommand>)
        VB: ExtensibleFtpServer.ExtensibleFtpServer(IFtpAuthenticator, List(Of FtpCommand))
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.ExtensibleFtpServer(DouglasDwyer.ExtensibleFtp.IFtpAuthenticator, System.Collections.Generic.List<DouglasDwyer.ExtensibleFtp.FtpCommand>)
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.ExtensibleFtpServer(DouglasDwyer.ExtensibleFtp.IFtpAuthenticator, System.Collections.Generic.List(Of DouglasDwyer.ExtensibleFtp.FtpCommand))
      type: Constructor
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: .ctor
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpServer.cs
        startLine: 76
      summary: "\nCreates a new <xref href=\"DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified authenticator and command set.\n"
      example: []
      syntax:
        content:
          CSharp: public ExtensibleFtpServer(IFtpAuthenticator authenticator, List<FtpCommand> commandSet)
          VB: Public Sub New(authenticator As IFtpAuthenticator, commandSet As List(Of FtpCommand))
        parameters:
        - id: authenticator
          type: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator
          description: An FTP authenticator which manages user identities.
        - id: commandSet
          type: System.Collections.Generic.List{DouglasDwyer.ExtensibleFtp.FtpCommand}
          description: The set of FTP commands to use.
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer: 
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Start(System.Int32)
      commentId: M:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Start(System.Int32)
      language: CSharp
      name:
        CSharp: Start(Int32)
        VB: Start(Int32)
      nameWithType:
        CSharp: ExtensibleFtpServer.Start(Int32)
        VB: ExtensibleFtpServer.Start(Int32)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Start(System.Int32)
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Start(System.Int32)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: Start
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpServer.cs
        startLine: 86
      summary: "\nStarts the FTP server.\n"
      example: []
      syntax:
        content:
          CSharp: public void Start(int port = 21)
          VB: Public Sub Start(port As Integer = 21)
        parameters:
        - id: port
          type: System.Int32
          description: The port that the FTP server should listen on.
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Start*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Stop
      commentId: M:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Stop
      language: CSharp
      name:
        CSharp: Stop()
        VB: Stop()
      nameWithType:
        CSharp: ExtensibleFtpServer.Stop()
        VB: ExtensibleFtpServer.Stop()
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Stop()
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Stop()
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: Stop
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpServer.cs
        startLine: 103
      summary: "\nStops the FTP server, severing all client connections.\n"
      example: []
      syntax:
        content:
          CSharp: public void Stop()
          VB: Public Sub Stop
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Stop*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.GetCommand(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.GetCommand(System.String)
      language: CSharp
      name:
        CSharp: GetCommand(String)
        VB: GetCommand(String)
      nameWithType:
        CSharp: ExtensibleFtpServer.GetCommand(String)
        VB: ExtensibleFtpServer.GetCommand(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.GetCommand(System.String)
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.GetCommand(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: GetCommand
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpServer.cs
        startLine: 125
      summary: "\nGets a registered FTP command by the command&apos;s name.\n"
      example: []
      syntax:
        content:
          CSharp: public FtpCommand GetCommand(string commandName)
          VB: Public Function GetCommand(commandName As String) As FtpCommand
        parameters:
        - id: commandName
          type: System.String
          description: The name of the command in the current command set to obtain.
        return:
          type: DouglasDwyer.ExtensibleFtp.FtpCommand
          description: The specified command, or null if no command was found.
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.GetCommand*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
    commentId: T:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
    language: CSharp
    name:
      CSharp: ExtensibleFtpUser
      VB: ExtensibleFtpUser
    nameWithType:
      CSharp: ExtensibleFtpUser
      VB: ExtensibleFtpUser
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
      VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp
    source:
      id: ExtensibleFtpUser
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpUser.cs
      startLine: 15
    summary: "\nRepresents a client that is currently connected to an <xref href=\"DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    example: []
    syntax:
      content:
        CSharp: public sealed class ExtensibleFtpUser
        VB: Public NotInheritable Class ExtensibleFtpUser
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Host
      commentId: P:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Host
      language: CSharp
      name:
        CSharp: Host
        VB: Host
      nameWithType:
        CSharp: ExtensibleFtpUser.Host
        VB: ExtensibleFtpUser.Host
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Host
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Host
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: Host
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpUser.cs
        startLine: 20
      summary: "\nThe FTP server that is hosting this client.\n"
      example: []
      syntax:
        content:
          CSharp: public ExtensibleFtpServer Host { get; }
          VB: Public ReadOnly Property Host As ExtensibleFtpServer
        parameters: []
        return:
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Host*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity
      commentId: P:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity
      language: CSharp
      name:
        CSharp: Identity
        VB: Identity
      nameWithType:
        CSharp: ExtensibleFtpUser.Identity
        VB: ExtensibleFtpUser.Identity
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: Identity
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpUser.cs
        startLine: 24
      summary: "\nThe client&apos;s user identity, or null if the client is not logged in.\n"
      example: []
      syntax:
        content:
          CSharp: public IFtpIdentity Identity { get; set; }
          VB: Public Property Identity As IFtpIdentity
        parameters: []
        return:
          type: DouglasDwyer.ExtensibleFtp.IFtpIdentity
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Filesystem
      commentId: P:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Filesystem
      language: CSharp
      name:
        CSharp: Filesystem
        VB: Filesystem
      nameWithType:
        CSharp: ExtensibleFtpUser.Filesystem
        VB: ExtensibleFtpUser.Filesystem
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Filesystem
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Filesystem
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: Filesystem
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpUser.cs
        startLine: 28
      summary: "\nThe filesystem associated with the current <xref href=\"DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity\" data-throw-if-not-resolved=\"false\"></xref>.  This may throw an exception if the user is not logged in.\n"
      example: []
      syntax:
        content:
          CSharp: public IFtpFilesystem Filesystem { get; }
          VB: Public ReadOnly Property Filesystem As IFtpFilesystem
        parameters: []
        return:
          type: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Filesystem*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity: 
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.TransferType
      commentId: P:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.TransferType
      language: CSharp
      name:
        CSharp: TransferType
        VB: TransferType
      nameWithType:
        CSharp: ExtensibleFtpUser.TransferType
        VB: ExtensibleFtpUser.TransferType
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.TransferType
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.TransferType
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: TransferType
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpUser.cs
        startLine: 32
      summary: "\nThe encoding type to use when transferring information across the data connection.\n"
      example: []
      syntax:
        content:
          CSharp: public TransferMode TransferType { get; set; }
          VB: Public Property TransferType As TransferMode
        parameters: []
        return:
          type: DouglasDwyer.ExtensibleFtp.TransferMode
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.TransferType*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.DataClient
      commentId: P:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.DataClient
      language: CSharp
      name:
        CSharp: DataClient
        VB: DataClient
      nameWithType:
        CSharp: ExtensibleFtpUser.DataClient
        VB: ExtensibleFtpUser.DataClient
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.DataClient
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.DataClient
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: DataClient
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpUser.cs
        startLine: 36
      summary: "\nThe current data connector.\n"
      example: []
      syntax:
        content:
          CSharp: public IDataConnector DataClient { get; set; }
          VB: Public Property DataClient As IDataConnector
        parameters: []
        return:
          type: DouglasDwyer.ExtensibleFtp.IDataConnector
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.DataClient*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.IsLoggedIn
      commentId: P:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.IsLoggedIn
      language: CSharp
      name:
        CSharp: IsLoggedIn
        VB: IsLoggedIn
      nameWithType:
        CSharp: ExtensibleFtpUser.IsLoggedIn
        VB: ExtensibleFtpUser.IsLoggedIn
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.IsLoggedIn
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.IsLoggedIn
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: IsLoggedIn
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpUser.cs
        startLine: 40
      summary: "\nWhether the client has been authenticated.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsLoggedIn { get; }
          VB: Public ReadOnly Property IsLoggedIn As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.IsLoggedIn*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.CurrentDirectory
      commentId: P:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.CurrentDirectory
      language: CSharp
      name:
        CSharp: CurrentDirectory
        VB: CurrentDirectory
      nameWithType:
        CSharp: ExtensibleFtpUser.CurrentDirectory
        VB: ExtensibleFtpUser.CurrentDirectory
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.CurrentDirectory
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.CurrentDirectory
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: CurrentDirectory
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpUser.cs
        startLine: 44
      summary: "\nThe user&apos;s current FTP directory.\n"
      example: []
      syntax:
        content:
          CSharp: public string CurrentDirectory { get; set; }
          VB: Public Property CurrentDirectory As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.CurrentDirectory*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.LastCommandData
      commentId: F:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.LastCommandData
      language: CSharp
      name:
        CSharp: LastCommandData
        VB: LastCommandData
      nameWithType:
        CSharp: ExtensibleFtpUser.LastCommandData
        VB: ExtensibleFtpUser.LastCommandData
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.LastCommandData
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.LastCommandData
      type: Field
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: LastCommandData
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpUser.cs
        startLine: 49
      summary: "\nAn object which contains data put there by the last command used.  Two-part commands, like USER and PASS, use this object to pass data between each other.\n"
      example: []
      syntax:
        content:
          CSharp: public object LastCommandData
          VB: Public LastCommandData As Object
        return:
          type: System.Object
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.ControlClient
      commentId: P:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.ControlClient
      language: CSharp
      name:
        CSharp: ControlClient
        VB: ControlClient
      nameWithType:
        CSharp: ExtensibleFtpUser.ControlClient
        VB: ExtensibleFtpUser.ControlClient
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.ControlClient
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.ControlClient
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: ControlClient
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpUser.cs
        startLine: 52
      syntax:
        content:
          CSharp: public TcpClient ControlClient { get; }
          VB: Public ReadOnly Property ControlClient As TcpClient
        parameters: []
        return:
          type: System.Net.Sockets.TcpClient
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.ControlClient*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Stop
      commentId: M:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Stop
      language: CSharp
      name:
        CSharp: Stop()
        VB: Stop()
      nameWithType:
        CSharp: ExtensibleFtpUser.Stop()
        VB: ExtensibleFtpUser.Stop()
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Stop()
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Stop()
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: Stop
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpUser.cs
        startLine: 72
      summary: "\nStops the FTP connection and disconnects the user from the server.\n"
      example: []
      syntax:
        content:
          CSharp: public void Stop()
          VB: Public Sub Stop
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Stop*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse(System.Net.FtpStatusCode,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse(System.Net.FtpStatusCode,System.String)
      language: CSharp
      name:
        CSharp: SendResponse(FtpStatusCode, String)
        VB: SendResponse(FtpStatusCode, String)
      nameWithType:
        CSharp: ExtensibleFtpUser.SendResponse(FtpStatusCode, String)
        VB: ExtensibleFtpUser.SendResponse(FtpStatusCode, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse(System.Net.FtpStatusCode, System.String)
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse(System.Net.FtpStatusCode, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: SendResponse
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpUser.cs
        startLine: 142
      summary: "\nSends an FTP response to the client.  FTP responses consist of a status code and a single-line message.\n"
      example: []
      syntax:
        content:
          CSharp: public void SendResponse(FtpStatusCode code, string data)
          VB: Public Sub SendResponse(code As FtpStatusCode, data As String)
        parameters:
        - id: code
          type: System.Net.FtpStatusCode
          description: The FTP status code to send.
        - id: data
          type: System.String
          description: The message to send along with the status code.
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse(System.Int32,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse(System.Int32,System.String)
      language: CSharp
      name:
        CSharp: SendResponse(Int32, String)
        VB: SendResponse(Int32, String)
      nameWithType:
        CSharp: ExtensibleFtpUser.SendResponse(Int32, String)
        VB: ExtensibleFtpUser.SendResponse(Int32, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse(System.Int32, System.String)
        VB: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse(System.Int32, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: SendResponse
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\ExtensibleFtpUser.cs
        startLine: 152
      summary: "\nSends an FTP response to the client.  FTP responses consist of a status code and a single-line message.\n"
      example: []
      syntax:
        content:
          CSharp: public void SendResponse(int code, string data)
          VB: Public Sub SendResponse(code As Integer, data As String)
        parameters:
        - id: code
          type: System.Int32
          description: The FTP status code to send.
        - id: data
          type: System.String
          description: The message to send along with the status code.
      overload: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer: 
  - id: DouglasDwyer.ExtensibleFtp.FtpCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.FtpCommand
    language: CSharp
    name:
      CSharp: FtpCommand
      VB: FtpCommand
    nameWithType:
      CSharp: FtpCommand
      VB: FtpCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.FtpCommand
      VB: DouglasDwyer.ExtensibleFtp.FtpCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp
    source:
      id: FtpCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\FtpCommand.cs
      startLine: 5
    summary: "\nRepresents an FTP command that a user may issue to an FTP server to perform a certain action.\n"
    example: []
    syntax:
      content:
        CSharp: public abstract class FtpCommand
        VB: Public MustInherit Class FtpCommand
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: FtpCommand.CommandName
        VB: FtpCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\FtpCommand.cs
        startLine: 10
      summary: "\nThe name of the command that the user should issue.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract string CommandName { get; }
          VB: Public MustOverride ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName*
      modifiers:
        CSharp:
        - public
        - abstract
        - get
        VB:
        - Public
        - MustOverride
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: FtpCommand.Execute(ExtensibleFtpUser, String)
        VB: FtpCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\FtpCommand.cs
        startLine: 17
      summary: "\nThis method is called when a user issues this command.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract void Execute(ExtensibleFtpUser user, string arguments)
          VB: Public MustOverride Sub Execute(user As ExtensibleFtpUser, arguments As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
          description: The user who made the request.
        - id: arguments
          type: System.String
          description: Any extra data that the user sent along with the name of the request.
      overload: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
  - id: DouglasDwyer.ExtensibleFtp.FtpException
    commentId: T:DouglasDwyer.ExtensibleFtp.FtpException
    language: CSharp
    name:
      CSharp: FtpException
      VB: FtpException
    nameWithType:
      CSharp: FtpException
      VB: FtpException
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.FtpException
      VB: DouglasDwyer.ExtensibleFtp.FtpException
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp
    source:
      id: FtpException
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\FtpException.cs
      startLine: 10
    summary: "\nRepresents an FTP error which occured during processing a user request.  When an FTP exception is thrown, its information is relayed to the FTP client.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class FtpException : Exception, ISerializable'
        VB: >-
          Public Class FtpException

              Inherits Exception

              Implements ISerializable
    inheritance:
    - System.Object
    - System.Exception
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Message
    - System.Exception.Source
    - System.Exception.StackTrace
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.FtpException.StatusCode
      commentId: P:DouglasDwyer.ExtensibleFtp.FtpException.StatusCode
      language: CSharp
      name:
        CSharp: StatusCode
        VB: StatusCode
      nameWithType:
        CSharp: FtpException.StatusCode
        VB: FtpException.StatusCode
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.FtpException.StatusCode
        VB: DouglasDwyer.ExtensibleFtp.FtpException.StatusCode
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: StatusCode
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\FtpException.cs
        startLine: 15
      summary: "\nThe status code associated with this error.\n"
      example: []
      syntax:
        content:
          CSharp: public int StatusCode { get; protected set; }
          VB: Public Property StatusCode As Integer
        parameters: []
        return:
          type: System.Int32
      overload: DouglasDwyer.ExtensibleFtp.FtpException.StatusCode*
      modifiers:
        CSharp:
        - public
        - get
        - protected set
        VB:
        - Public
        - Get
        - Protected Set
    - id: DouglasDwyer.ExtensibleFtp.FtpException.#ctor
      commentId: M:DouglasDwyer.ExtensibleFtp.FtpException.#ctor
      language: CSharp
      name:
        CSharp: FtpException()
        VB: FtpException()
      nameWithType:
        CSharp: FtpException.FtpException()
        VB: FtpException.FtpException()
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.FtpException.FtpException()
        VB: DouglasDwyer.ExtensibleFtp.FtpException.FtpException()
      type: Constructor
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: .ctor
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\FtpException.cs
        startLine: 20
      summary: "\nCreates a new instance of the <xref href=\"DouglasDwyer.ExtensibleFtp.FtpException\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public FtpException()
          VB: Public Sub New
      overload: DouglasDwyer.ExtensibleFtp.FtpException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.ExtensibleFtp.FtpException: 
    - id: DouglasDwyer.ExtensibleFtp.FtpException.#ctor(System.Int32,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.FtpException.#ctor(System.Int32,System.String)
      language: CSharp
      name:
        CSharp: FtpException(Int32, String)
        VB: FtpException(Int32, String)
      nameWithType:
        CSharp: FtpException.FtpException(Int32, String)
        VB: FtpException.FtpException(Int32, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.FtpException.FtpException(System.Int32, System.String)
        VB: DouglasDwyer.ExtensibleFtp.FtpException.FtpException(System.Int32, System.String)
      type: Constructor
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: .ctor
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\FtpException.cs
        startLine: 26
      summary: "\nCreates a new instance of the <xref href=\"DouglasDwyer.ExtensibleFtp.FtpException\" data-throw-if-not-resolved=\"false\"></xref> class with the specified data.\n"
      example: []
      syntax:
        content:
          CSharp: public FtpException(int code, string error)
          VB: Public Sub New(code As Integer, error As String)
        parameters:
        - id: code
          type: System.Int32
          description: The FTP status code associated with this error.
        - id: error
          type: System.String
          description: A message describing the error itself.
      overload: DouglasDwyer.ExtensibleFtp.FtpException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.ExtensibleFtp.FtpException: 
    - id: DouglasDwyer.ExtensibleFtp.FtpException.#ctor(System.Net.FtpStatusCode,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.FtpException.#ctor(System.Net.FtpStatusCode,System.String)
      language: CSharp
      name:
        CSharp: FtpException(FtpStatusCode, String)
        VB: FtpException(FtpStatusCode, String)
      nameWithType:
        CSharp: FtpException.FtpException(FtpStatusCode, String)
        VB: FtpException.FtpException(FtpStatusCode, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.FtpException.FtpException(System.Net.FtpStatusCode, System.String)
        VB: DouglasDwyer.ExtensibleFtp.FtpException.FtpException(System.Net.FtpStatusCode, System.String)
      type: Constructor
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: .ctor
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\FtpException.cs
        startLine: 35
      summary: "\nCreates a new instance of the <xref href=\"DouglasDwyer.ExtensibleFtp.FtpException\" data-throw-if-not-resolved=\"false\"></xref> class with the specified data.\n"
      example: []
      syntax:
        content:
          CSharp: public FtpException(FtpStatusCode code, string error)
          VB: Public Sub New(code As FtpStatusCode, error As String)
        parameters:
        - id: code
          type: System.Net.FtpStatusCode
          description: The FTP status code associated with this error.
        - id: error
          type: System.String
          description: A message describing the error itself.
      overload: DouglasDwyer.ExtensibleFtp.FtpException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.ExtensibleFtp.FtpException: 
  - id: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator
    commentId: T:DouglasDwyer.ExtensibleFtp.IFtpAuthenticator
    language: CSharp
    name:
      CSharp: IFtpAuthenticator
      VB: IFtpAuthenticator
    nameWithType:
      CSharp: IFtpAuthenticator
      VB: IFtpAuthenticator
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator
      VB: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator
    type: Interface
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp
    source:
      id: IFtpAuthenticator
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpAuthenticator.cs
      startLine: 9
    summary: "\nRepresents an object which manages user accounts and has the ability to authenticate users given their username and password.\n"
    example: []
    syntax:
      content:
        CSharp: public interface IFtpAuthenticator
        VB: Public Interface IFtpAuthenticator
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser(System.String,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser(System.String,System.String)
      language: CSharp
      name:
        CSharp: AuthenticateUser(String, String)
        VB: AuthenticateUser(String, String)
      nameWithType:
        CSharp: IFtpAuthenticator.AuthenticateUser(String, String)
        VB: IFtpAuthenticator.AuthenticateUser(String, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser(System.String, System.String)
        VB: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser(System.String, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: AuthenticateUser
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpAuthenticator.cs
        startLine: 17
      summary: "\nAuthenticates a user, identifying them from their username/password.\n"
      example: []
      syntax:
        content:
          CSharp: IFtpIdentity AuthenticateUser(string username, string password)
          VB: Function AuthenticateUser(username As String, password As String) As IFtpIdentity
        parameters:
        - id: username
          type: System.String
          description: The username of the individual attempting to log in.
        - id: password
          type: System.String
          description: The password of the user.
        return:
          type: DouglasDwyer.ExtensibleFtp.IFtpIdentity
          description: An <xref href="DouglasDwyer.ExtensibleFtp.IFtpIdentity" data-throw-if-not-resolved="false"></xref> object representing the logged-in user, or <code>null</code> if the attempt failed.
      overload: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser*
      modifiers:
        CSharp: []
        VB: []
      references:
        DouglasDwyer.ExtensibleFtp.IFtpIdentity: 
  - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: T:DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    language: CSharp
    name:
      CSharp: IFtpFilesystem
      VB: IFtpFilesystem
    nameWithType:
      CSharp: IFtpFilesystem
      VB: IFtpFilesystem
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
      VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    type: Interface
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp
    source:
      id: IFtpFilesystem
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
      startLine: 8
    summary: "\nRepresents an abstract filesystem that FTP users can interact with.\n"
    example: []
    syntax:
      content:
        CSharp: public interface IFtpFilesystem
        VB: Public Interface IFtpFilesystem
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists(System.String)
      language: CSharp
      name:
        CSharp: DirectoryExists(String)
        VB: DirectoryExists(String)
      nameWithType:
        CSharp: IFtpFilesystem.DirectoryExists(String)
        VB: IFtpFilesystem.DirectoryExists(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists(System.String)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: DirectoryExists
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 15
      summary: "\nChecks whether a directory exists.\n"
      example: []
      syntax:
        content:
          CSharp: bool DirectoryExists(string path)
          VB: Function DirectoryExists(path As String) As Boolean
        parameters:
        - id: path
          type: System.String
          description: The directory to check.
        return:
          type: System.Boolean
          description: Whether the directory exists.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists(System.String)
      language: CSharp
      name:
        CSharp: FileExists(String)
        VB: FileExists(String)
      nameWithType:
        CSharp: IFtpFilesystem.FileExists(String)
        VB: IFtpFilesystem.FileExists(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists(System.String)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: FileExists
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 21
      summary: "\nChecks whether a file exists.\n"
      example: []
      syntax:
        content:
          CSharp: bool FileExists(string path)
          VB: Function FileExists(path As String) As Boolean
        parameters:
        - id: path
          type: System.String
          description: The file to check.
        return:
          type: System.Boolean
          description: Whether the file exists.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles(System.String)
      language: CSharp
      name:
        CSharp: GetFiles(String)
        VB: GetFiles(String)
      nameWithType:
        CSharp: IFtpFilesystem.GetFiles(String)
        VB: IFtpFilesystem.GetFiles(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles(System.String)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: GetFiles
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 27
      summary: "\nRetrieves all the files in the specified directory.\n"
      example: []
      syntax:
        content:
          CSharp: string[] GetFiles(string path)
          VB: Function GetFiles(path As String) As String()
        parameters:
        - id: path
          type: System.String
          description: The path of the directory.
        return:
          type: System.String[]
          description: A list of files.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories(System.String)
      language: CSharp
      name:
        CSharp: GetSubdirectories(String)
        VB: GetSubdirectories(String)
      nameWithType:
        CSharp: IFtpFilesystem.GetSubdirectories(String)
        VB: IFtpFilesystem.GetSubdirectories(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories(System.String)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: GetSubdirectories
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 33
      summary: "\nRetrieves all the subdirectories in the specified directory.\n"
      example: []
      syntax:
        content:
          CSharp: string[] GetSubdirectories(string path)
          VB: Function GetSubdirectories(path As String) As String()
        parameters:
        - id: path
          type: System.String
          description: The path of the directory.
        return:
          type: System.String[]
          description: A list of directories.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo(System.String)
      language: CSharp
      name:
        CSharp: GetDirectoryInfo(String)
        VB: GetDirectoryInfo(String)
      nameWithType:
        CSharp: IFtpFilesystem.GetDirectoryInfo(String)
        VB: IFtpFilesystem.GetDirectoryInfo(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo(System.String)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: GetDirectoryInfo
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 39
      summary: "\nRetrieves a <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object that contains information about a specified directory.\n"
      example: []
      syntax:
        content:
          CSharp: DirectoryInfo GetDirectoryInfo(string path)
          VB: Function GetDirectoryInfo(path As String) As DirectoryInfo
        parameters:
        - id: path
          type: System.String
          description: The path of the directory.
        return:
          type: System.IO.DirectoryInfo
          description: An object containing information about the directory.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo*
      modifiers:
        CSharp: []
        VB: []
      references:
        System.IO.DirectoryInfo: 
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo(System.String)
      language: CSharp
      name:
        CSharp: GetFileInfo(String)
        VB: GetFileInfo(String)
      nameWithType:
        CSharp: IFtpFilesystem.GetFileInfo(String)
        VB: IFtpFilesystem.GetFileInfo(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo(System.String)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: GetFileInfo
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 45
      summary: "\nRetrieves a <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> object that contains information about a specified file.\n"
      example: []
      syntax:
        content:
          CSharp: FileInfo GetFileInfo(string path)
          VB: Function GetFileInfo(path As String) As FileInfo
        parameters:
        - id: path
          type: System.String
          description: The path of the file.
        return:
          type: System.IO.FileInfo
          description: An object containing information about the file.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo*
      modifiers:
        CSharp: []
        VB: []
      references:
        System.IO.FileInfo: 
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream(System.String)
      language: CSharp
      name:
        CSharp: GetFileStream(String)
        VB: GetFileStream(String)
      nameWithType:
        CSharp: IFtpFilesystem.GetFileStream(String)
        VB: IFtpFilesystem.GetFileStream(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream(System.String)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: GetFileStream
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 51
      summary: "\nRetrieves a read-only file stream for the specified file.\n"
      example: []
      syntax:
        content:
          CSharp: FileStream GetFileStream(string path)
          VB: Function GetFileStream(path As String) As FileStream
        parameters:
        - id: path
          type: System.String
          description: The path of the file to read.
        return:
          type: System.IO.FileStream
          description: A read-only file stream.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
      language: CSharp
      name:
        CSharp: GetFilePermissions(String, IFtpIdentity)
        VB: GetFilePermissions(String, IFtpIdentity)
      nameWithType:
        CSharp: IFtpFilesystem.GetFilePermissions(String, IFtpIdentity)
        VB: IFtpFilesystem.GetFilePermissions(String, IFtpIdentity)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions(System.String, DouglasDwyer.ExtensibleFtp.IFtpIdentity)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions(System.String, DouglasDwyer.ExtensibleFtp.IFtpIdentity)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: GetFilePermissions
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 58
      summary: "\nGets the permission listing for the specified file, relative to the current user.\n"
      example: []
      syntax:
        content:
          CSharp: string GetFilePermissions(string path, IFtpIdentity identity)
          VB: Function GetFilePermissions(path As String, identity As IFtpIdentity) As String
        parameters:
        - id: path
          type: System.String
          description: The path of the file to get information about.
        - id: identity
          type: DouglasDwyer.ExtensibleFtp.IFtpIdentity
          description: The identity of the current user.
        return:
          type: System.String
          description: A unix-formatted permission string.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
      language: CSharp
      name:
        CSharp: GetDirectoryPermissions(String, IFtpIdentity)
        VB: GetDirectoryPermissions(String, IFtpIdentity)
      nameWithType:
        CSharp: IFtpFilesystem.GetDirectoryPermissions(String, IFtpIdentity)
        VB: IFtpFilesystem.GetDirectoryPermissions(String, IFtpIdentity)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions(System.String, DouglasDwyer.ExtensibleFtp.IFtpIdentity)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions(System.String, DouglasDwyer.ExtensibleFtp.IFtpIdentity)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: GetDirectoryPermissions
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 65
      summary: "\nGets the permission listing for the specified directory, relative to the current user.\n"
      example: []
      syntax:
        content:
          CSharp: string GetDirectoryPermissions(string path, IFtpIdentity identity)
          VB: Function GetDirectoryPermissions(path As String, identity As IFtpIdentity) As String
        parameters:
        - id: path
          type: System.String
          description: The path of the directory to get information about.
        - id: identity
          type: DouglasDwyer.ExtensibleFtp.IFtpIdentity
          description: The identity of the current user.
        return:
          type: System.String
          description: A unix-formatted permission string.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile(System.String)
      language: CSharp
      name:
        CSharp: DeleteFile(String)
        VB: DeleteFile(String)
      nameWithType:
        CSharp: IFtpFilesystem.DeleteFile(String)
        VB: IFtpFilesystem.DeleteFile(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile(System.String)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: DeleteFile
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 70
      summary: "\nDeletes a file.\n"
      example: []
      syntax:
        content:
          CSharp: void DeleteFile(string path)
          VB: Sub DeleteFile(path As String)
        parameters:
        - id: path
          type: System.String
          description: The path of the file to delete.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory(System.String)
      language: CSharp
      name:
        CSharp: DeleteDirectory(String)
        VB: DeleteDirectory(String)
      nameWithType:
        CSharp: IFtpFilesystem.DeleteDirectory(String)
        VB: IFtpFilesystem.DeleteDirectory(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory(System.String)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: DeleteDirectory
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 75
      summary: "\nDeletes a directory recursively, removing all files and subdirectories.\n"
      example: []
      syntax:
        content:
          CSharp: void DeleteDirectory(string path)
          VB: Sub DeleteDirectory(path As String)
        parameters:
        - id: path
          type: System.String
          description: The path of the directory to delete.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory(System.String)
      language: CSharp
      name:
        CSharp: CreateDirectory(String)
        VB: CreateDirectory(String)
      nameWithType:
        CSharp: IFtpFilesystem.CreateDirectory(String)
        VB: IFtpFilesystem.CreateDirectory(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory(System.String)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: CreateDirectory
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 80
      summary: "\nCreates a new directory.\n"
      example: []
      syntax:
        content:
          CSharp: void CreateDirectory(string path)
          VB: Sub CreateDirectory(path As String)
        parameters:
        - id: path
          type: System.String
          description: The name of the directory to create.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile(System.String)
      language: CSharp
      name:
        CSharp: CreateFile(String)
        VB: CreateFile(String)
      nameWithType:
        CSharp: IFtpFilesystem.CreateFile(String)
        VB: IFtpFilesystem.CreateFile(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile(System.String)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: CreateFile
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 86
      summary: "\nCreates a new file.\n"
      example: []
      syntax:
        content:
          CSharp: FileStream CreateFile(string path)
          VB: Function CreateFile(path As String) As FileStream
        parameters:
        - id: path
          type: System.String
          description: The path of the file to create.
        return:
          type: System.IO.FileStream
          description: A file stream for writing to the new file.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory(System.String,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory(System.String,System.String)
      language: CSharp
      name:
        CSharp: MoveDirectory(String, String)
        VB: MoveDirectory(String, String)
      nameWithType:
        CSharp: IFtpFilesystem.MoveDirectory(String, String)
        VB: IFtpFilesystem.MoveDirectory(String, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory(System.String, System.String)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory(System.String, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: MoveDirectory
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 92
      summary: "\nMoves a directory, changing its path.\n"
      example: []
      syntax:
        content:
          CSharp: void MoveDirectory(string oldPath, string newPath)
          VB: Sub MoveDirectory(oldPath As String, newPath As String)
        parameters:
        - id: oldPath
          type: System.String
          description: The current path of the directory.
        - id: newPath
          type: System.String
          description: The new path of the directory.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile(System.String,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile(System.String,System.String)
      language: CSharp
      name:
        CSharp: MoveFile(String, String)
        VB: MoveFile(String, String)
      nameWithType:
        CSharp: IFtpFilesystem.MoveFile(String, String)
        VB: IFtpFilesystem.MoveFile(String, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile(System.String, System.String)
        VB: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile(System.String, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: MoveFile
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpFilesystem.cs
        startLine: 98
      summary: "\nMoves a file, changing its path.\n"
      example: []
      syntax:
        content:
          CSharp: void MoveFile(string oldPath, string newPath)
          VB: Sub MoveFile(oldPath As String, newPath As String)
        parameters:
        - id: oldPath
          type: System.String
          description: The current path of the file.
        - id: newPath
          type: System.String
          description: The new path of the file.
      overload: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile*
      modifiers:
        CSharp: []
        VB: []
  - id: DouglasDwyer.ExtensibleFtp.IFtpIdentity
    commentId: T:DouglasDwyer.ExtensibleFtp.IFtpIdentity
    language: CSharp
    name:
      CSharp: IFtpIdentity
      VB: IFtpIdentity
    nameWithType:
      CSharp: IFtpIdentity
      VB: IFtpIdentity
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.IFtpIdentity
      VB: DouglasDwyer.ExtensibleFtp.IFtpIdentity
    type: Interface
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp
    source:
      id: IFtpIdentity
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpIdentity.cs
      startLine: 5
    summary: "\nRepresents the identity of an <xref href=\"DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    example: []
    syntax:
      content:
        CSharp: public interface IFtpIdentity
        VB: Public Interface IFtpIdentity
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem
      commentId: P:DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem
      language: CSharp
      name:
        CSharp: Filesystem
        VB: Filesystem
      nameWithType:
        CSharp: IFtpIdentity.Filesystem
        VB: IFtpIdentity.Filesystem
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem
        VB: DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: Filesystem
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\IFtpIdentity.cs
        startLine: 10
      summary: "\nThe filesystem that users with this identity should be allowed to interact with.\n"
      example: []
      syntax:
        content:
          CSharp: IFtpFilesystem Filesystem { get; }
          VB: ReadOnly Property Filesystem As IFtpFilesystem
        parameters: []
        return:
          type: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
      overload: DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    references:
      DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser: 
  - id: DouglasDwyer.ExtensibleFtp.PassiveDataConnector
    commentId: T:DouglasDwyer.ExtensibleFtp.PassiveDataConnector
    language: CSharp
    name:
      CSharp: PassiveDataConnector
      VB: PassiveDataConnector
    nameWithType:
      CSharp: PassiveDataConnector
      VB: PassiveDataConnector
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.PassiveDataConnector
      VB: DouglasDwyer.ExtensibleFtp.PassiveDataConnector
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp
    source:
      id: PassiveDataConnector
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\PassiveDataConnector.cs
      startLine: 12
    summary: "\nRepresents a &quot;passive&quot; data connector, which creates data connections by listening for clients on a specific server-side port.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class PassiveDataConnector : IDataConnector, IDisposable'
        VB: >-
          Public Class PassiveDataConnector

              Implements IDataConnector, IDisposable
    inheritance:
    - System.Object
    implements:
    - DouglasDwyer.ExtensibleFtp.IDataConnector
    - System.IDisposable
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.DataListener
      commentId: F:DouglasDwyer.ExtensibleFtp.PassiveDataConnector.DataListener
      language: CSharp
      name:
        CSharp: DataListener
        VB: DataListener
      nameWithType:
        CSharp: PassiveDataConnector.DataListener
        VB: PassiveDataConnector.DataListener
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.DataListener
        VB: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.DataListener
      type: Field
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: DataListener
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\PassiveDataConnector.cs
        startLine: 17
      summary: "\nThe current <xref href=\"System.Net.Sockets.TcpListener\" data-throw-if-not-resolved=\"false\"></xref> used to listen for incoming passive data connections.\n"
      example: []
      syntax:
        content:
          CSharp: public TcpListener DataListener
          VB: Public DataListener As TcpListener
        return:
          type: System.Net.Sockets.TcpListener
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.Net.Sockets.TcpListener: 
    - id: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.#ctor
      commentId: M:DouglasDwyer.ExtensibleFtp.PassiveDataConnector.#ctor
      language: CSharp
      name:
        CSharp: PassiveDataConnector()
        VB: PassiveDataConnector()
      nameWithType:
        CSharp: PassiveDataConnector.PassiveDataConnector()
        VB: PassiveDataConnector.PassiveDataConnector()
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.PassiveDataConnector()
        VB: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.PassiveDataConnector()
      type: Constructor
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: .ctor
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\PassiveDataConnector.cs
        startLine: 22
      summary: "\nCreates a new passive data connector, starting a <xref href=\"System.Net.Sockets.TcpListener\" data-throw-if-not-resolved=\"false\"></xref> to manage data connections in the process.\n"
      example: []
      syntax:
        content:
          CSharp: public PassiveDataConnector()
          VB: Public Sub New
      overload: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.Net.Sockets.TcpListener: 
    - id: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.CreateDataConnectionAsync
      commentId: M:DouglasDwyer.ExtensibleFtp.PassiveDataConnector.CreateDataConnectionAsync
      language: CSharp
      name:
        CSharp: CreateDataConnectionAsync()
        VB: CreateDataConnectionAsync()
      nameWithType:
        CSharp: PassiveDataConnector.CreateDataConnectionAsync()
        VB: PassiveDataConnector.CreateDataConnectionAsync()
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.CreateDataConnectionAsync()
        VB: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.CreateDataConnectionAsync()
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: CreateDataConnectionAsync
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\PassiveDataConnector.cs
        startLine: 31
      summary: "\nCreates a new data connection.\n"
      example: []
      syntax:
        content:
          CSharp: public Task<TcpClient> CreateDataConnectionAsync()
          VB: Public Function CreateDataConnectionAsync As Task(Of TcpClient)
        return:
          type: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
          description: A <xref href="System.Net.Sockets.TcpClient" data-throw-if-not-resolved="false"></xref> that can be used to transfer data.  The client should be disposed when no longer in use.
      overload: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.CreateDataConnectionAsync*
      implements:
      - DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.Net.Sockets.TcpClient: 
    - id: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.Dispose
      commentId: M:DouglasDwyer.ExtensibleFtp.PassiveDataConnector.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: PassiveDataConnector.Dispose()
        VB: PassiveDataConnector.Dispose()
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.Dispose()
        VB: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.Dispose()
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: Dispose
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\PassiveDataConnector.cs
        startLine: 39
      summary: "\nDisposes the connector, closing any active data connections in the process.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.Dispose*
      implements:
      - System.IDisposable.Dispose
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: DouglasDwyer.ExtensibleFtp.TransferMode
    commentId: T:DouglasDwyer.ExtensibleFtp.TransferMode
    language: CSharp
    name:
      CSharp: TransferMode
      VB: TransferMode
    nameWithType:
      CSharp: TransferMode
      VB: TransferMode
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.TransferMode
      VB: DouglasDwyer.ExtensibleFtp.TransferMode
    type: Enum
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp
    source:
      id: TransferMode
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\TransferMode.cs
      startLine: 5
    summary: "\nUsed to describe the way that files should be transferred over FTP.\n"
    example: []
    syntax:
      content:
        CSharp: public enum TransferMode
        VB: Public Enum TransferMode
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: DouglasDwyer.ExtensibleFtp.TransferMode.ASCII
      commentId: F:DouglasDwyer.ExtensibleFtp.TransferMode.ASCII
      language: CSharp
      name:
        CSharp: ASCII
        VB: ASCII
      nameWithType:
        CSharp: TransferMode.ASCII
        VB: TransferMode.ASCII
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.TransferMode.ASCII
        VB: DouglasDwyer.ExtensibleFtp.TransferMode.ASCII
      type: Field
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: ASCII
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\TransferMode.cs
        startLine: 10
      summary: "\nFiles should be transferred using ASCII text encoding.\n"
      example: []
      syntax:
        content:
          CSharp: ASCII = 0
          VB: ASCII = 0
        return:
          type: DouglasDwyer.ExtensibleFtp.TransferMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: DouglasDwyer.ExtensibleFtp.TransferMode.Binary
      commentId: F:DouglasDwyer.ExtensibleFtp.TransferMode.Binary
      language: CSharp
      name:
        CSharp: Binary
        VB: Binary
      nameWithType:
        CSharp: TransferMode.Binary
        VB: TransferMode.Binary
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.TransferMode.Binary
        VB: DouglasDwyer.ExtensibleFtp.TransferMode.Binary
      type: Field
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: Binary
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\TransferMode.cs
        startLine: 14
      summary: "\nFiles should be transferred using their raw binary data.\n"
      example: []
      syntax:
        content:
          CSharp: Binary = 1
          VB: Binary = 1
        return:
          type: DouglasDwyer.ExtensibleFtp.TransferMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: DouglasDwyer.ExtensibleFtp.TransferMode.EBCDIC
      commentId: F:DouglasDwyer.ExtensibleFtp.TransferMode.EBCDIC
      language: CSharp
      name:
        CSharp: EBCDIC
        VB: EBCDIC
      nameWithType:
        CSharp: TransferMode.EBCDIC
        VB: TransferMode.EBCDIC
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.TransferMode.EBCDIC
        VB: DouglasDwyer.ExtensibleFtp.TransferMode.EBCDIC
      type: Field
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp
      source:
        id: EBCDIC
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\TransferMode.cs
        startLine: 18
      summary: "\nFiles should be transferred using EBCDIC text encoding.\n"
      example: []
      syntax:
        content:
          CSharp: EBCDIC = 2
          VB: EBCDIC = 2
        return:
          type: DouglasDwyer.ExtensibleFtp.TransferMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
- id: DouglasDwyer.ExtensibleFtp.Anonymous
  commentId: N:DouglasDwyer.ExtensibleFtp.Anonymous
  language: CSharp
  name:
    CSharp: DouglasDwyer.ExtensibleFtp.Anonymous
    VB: DouglasDwyer.ExtensibleFtp.Anonymous
  nameWithType:
    CSharp: DouglasDwyer.ExtensibleFtp.Anonymous
    VB: DouglasDwyer.ExtensibleFtp.Anonymous
  qualifiedName:
    CSharp: DouglasDwyer.ExtensibleFtp.Anonymous
    VB: DouglasDwyer.ExtensibleFtp.Anonymous
  type: Namespace
  assemblies:
  - ExtensibleFtp
  modifiers: {}
  items:
  - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator
    commentId: T:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator
    language: CSharp
    name:
      CSharp: AnonymousAuthenticator
      VB: AnonymousAuthenticator
    nameWithType:
      CSharp: AnonymousAuthenticator
      VB: AnonymousAuthenticator
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator
      VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Anonymous
    source:
      id: AnonymousAuthenticator
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousAuthenticator.cs
      startLine: 9
    summary: "\nRepresents an authenticator which allows users to connect to the FTP server under any username.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AnonymousAuthenticator : IFtpAuthenticator'
        VB: >-
          Public Class AnonymousAuthenticator

              Implements IFtpAuthenticator
    inheritance:
    - System.Object
    implements:
    - DouglasDwyer.ExtensibleFtp.IFtpAuthenticator
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.RootDirectory
      commentId: P:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.RootDirectory
      language: CSharp
      name:
        CSharp: RootDirectory
        VB: RootDirectory
      nameWithType:
        CSharp: AnonymousAuthenticator.RootDirectory
        VB: AnonymousAuthenticator.RootDirectory
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.RootDirectory
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.RootDirectory
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: RootDirectory
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousAuthenticator.cs
        startLine: 14
      summary: "\nThe root directory from which users can edit files.\n"
      example: []
      syntax:
        content:
          CSharp: public string RootDirectory { get; set; }
          VB: Public Property RootDirectory As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.RootDirectory*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.#ctor
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.#ctor
      language: CSharp
      name:
        CSharp: AnonymousAuthenticator()
        VB: AnonymousAuthenticator()
      nameWithType:
        CSharp: AnonymousAuthenticator.AnonymousAuthenticator()
        VB: AnonymousAuthenticator.AnonymousAuthenticator()
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AnonymousAuthenticator()
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AnonymousAuthenticator()
      type: Constructor
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: .ctor
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousAuthenticator.cs
        startLine: 19
      summary: "\nCreates a new <xref href=\"DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
      example: []
      syntax:
        content:
          CSharp: public AnonymousAuthenticator()
          VB: Public Sub New
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator: 
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.#ctor(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.#ctor(System.String)
      language: CSharp
      name:
        CSharp: AnonymousAuthenticator(String)
        VB: AnonymousAuthenticator(String)
      nameWithType:
        CSharp: AnonymousAuthenticator.AnonymousAuthenticator(String)
        VB: AnonymousAuthenticator.AnonymousAuthenticator(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AnonymousAuthenticator(System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AnonymousAuthenticator(System.String)
      type: Constructor
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: .ctor
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousAuthenticator.cs
        startLine: 28
      summary: "\nCreates a new <xref href=\"DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified data.\n"
      example: []
      syntax:
        content:
          CSharp: public AnonymousAuthenticator(string rootDirectory)
          VB: Public Sub New(rootDirectory As String)
        parameters:
        - id: rootDirectory
          type: System.String
          description: The root directory under which users can edit files.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator: 
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AuthenticateUser(System.String,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AuthenticateUser(System.String,System.String)
      language: CSharp
      name:
        CSharp: AuthenticateUser(String, String)
        VB: AuthenticateUser(String, String)
      nameWithType:
        CSharp: AnonymousAuthenticator.AuthenticateUser(String, String)
        VB: AnonymousAuthenticator.AuthenticateUser(String, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AuthenticateUser(System.String, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AuthenticateUser(System.String, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: AuthenticateUser
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousAuthenticator.cs
        startLine: 39
      summary: "\nAuthenticates a user, identifying them from their username/password.\n"
      example: []
      syntax:
        content:
          CSharp: public IFtpIdentity AuthenticateUser(string username, string password)
          VB: Public Function AuthenticateUser(username As String, password As String) As IFtpIdentity
        parameters:
        - id: username
          type: System.String
          description: The username of the individual attempting to log in.
        - id: password
          type: System.String
          description: The password of the user.
        return:
          type: DouglasDwyer.ExtensibleFtp.IFtpIdentity
          description: An <xref href="DouglasDwyer.ExtensibleFtp.IFtpIdentity" data-throw-if-not-resolved="false"></xref> object representing the logged-in user, or <code>null</code> if the attempt failed.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AuthenticateUser*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser(System.String,System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.ExtensibleFtp.IFtpIdentity: 
  - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem
    commentId: T:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem
    language: CSharp
    name:
      CSharp: AnonymousFilesystem
      VB: AnonymousFilesystem
    nameWithType:
      CSharp: AnonymousFilesystem
      VB: AnonymousFilesystem
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem
      VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Anonymous
    source:
      id: AnonymousFilesystem
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
      startLine: 7
    summary: "\nRepresents a filesystem where users have full control over any files under a certain root directory.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AnonymousFilesystem : IFtpFilesystem'
        VB: >-
          Public Class AnonymousFilesystem

              Implements IFtpFilesystem
    inheritance:
    - System.Object
    implements:
    - DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.RootDirectory
      commentId: P:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.RootDirectory
      language: CSharp
      name:
        CSharp: RootDirectory
        VB: RootDirectory
      nameWithType:
        CSharp: AnonymousFilesystem.RootDirectory
        VB: AnonymousFilesystem.RootDirectory
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.RootDirectory
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.RootDirectory
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: RootDirectory
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 12
      summary: "\nThe root directory in which users should be allowed to edit files.\n"
      example: []
      syntax:
        content:
          CSharp: public string RootDirectory { get; set; }
          VB: Public Property RootDirectory As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.RootDirectory*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.#ctor(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.#ctor(System.String)
      language: CSharp
      name:
        CSharp: AnonymousFilesystem(String)
        VB: AnonymousFilesystem(String)
      nameWithType:
        CSharp: AnonymousFilesystem.AnonymousFilesystem(String)
        VB: AnonymousFilesystem.AnonymousFilesystem(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.AnonymousFilesystem(System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.AnonymousFilesystem(System.String)
      type: Constructor
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: .ctor
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 18
      summary: "\nCreates a new <xref href=\"DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified data.\n"
      example: []
      syntax:
        content:
          CSharp: public AnonymousFilesystem(string rootDirectory)
          VB: Public Sub New(rootDirectory As String)
        parameters:
        - id: rootDirectory
          type: System.String
          description: The root directory in which users should be allowed to edit files.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem: 
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DirectoryExists(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DirectoryExists(System.String)
      language: CSharp
      name:
        CSharp: DirectoryExists(String)
        VB: DirectoryExists(String)
      nameWithType:
        CSharp: AnonymousFilesystem.DirectoryExists(String)
        VB: AnonymousFilesystem.DirectoryExists(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DirectoryExists(System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DirectoryExists(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: DirectoryExists
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 28
      summary: "\nChecks whether a directory exists.\n"
      example: []
      syntax:
        content:
          CSharp: public bool DirectoryExists(string path)
          VB: Public Function DirectoryExists(path As String) As Boolean
        parameters:
        - id: path
          type: System.String
          description: The directory to check.
        return:
          type: System.Boolean
          description: Whether the directory exists.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DirectoryExists*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.FileExists(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.FileExists(System.String)
      language: CSharp
      name:
        CSharp: FileExists(String)
        VB: FileExists(String)
      nameWithType:
        CSharp: AnonymousFilesystem.FileExists(String)
        VB: AnonymousFilesystem.FileExists(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.FileExists(System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.FileExists(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: FileExists
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 38
      summary: "\nChecks whether a file exists.\n"
      example: []
      syntax:
        content:
          CSharp: public bool FileExists(string path)
          VB: Public Function FileExists(path As String) As Boolean
        parameters:
        - id: path
          type: System.String
          description: The file to check.
        return:
          type: System.Boolean
          description: Whether the file exists.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.FileExists*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFiles(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFiles(System.String)
      language: CSharp
      name:
        CSharp: GetFiles(String)
        VB: GetFiles(String)
      nameWithType:
        CSharp: AnonymousFilesystem.GetFiles(String)
        VB: AnonymousFilesystem.GetFiles(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFiles(System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFiles(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: GetFiles
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 48
      summary: "\nRetrieves all the files in the specified directory.\n"
      example: []
      syntax:
        content:
          CSharp: public string[] GetFiles(string path)
          VB: Public Function GetFiles(path As String) As String()
        parameters:
        - id: path
          type: System.String
          description: The path of the directory.
        return:
          type: System.String[]
          description: A list of files.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFiles*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetSubdirectories(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetSubdirectories(System.String)
      language: CSharp
      name:
        CSharp: GetSubdirectories(String)
        VB: GetSubdirectories(String)
      nameWithType:
        CSharp: AnonymousFilesystem.GetSubdirectories(String)
        VB: AnonymousFilesystem.GetSubdirectories(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetSubdirectories(System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetSubdirectories(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: GetSubdirectories
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 68
      summary: "\nRetrieves all the subdirectories in the specified directory.\n"
      example: []
      syntax:
        content:
          CSharp: public string[] GetSubdirectories(string path)
          VB: Public Function GetSubdirectories(path As String) As String()
        parameters:
        - id: path
          type: System.String
          description: The path of the directory.
        return:
          type: System.String[]
          description: A list of directories.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetSubdirectories*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryInfo(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryInfo(System.String)
      language: CSharp
      name:
        CSharp: GetDirectoryInfo(String)
        VB: GetDirectoryInfo(String)
      nameWithType:
        CSharp: AnonymousFilesystem.GetDirectoryInfo(String)
        VB: AnonymousFilesystem.GetDirectoryInfo(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryInfo(System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryInfo(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: GetDirectoryInfo
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 88
      summary: "\nRetrieves a <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object that contains information about a specified directory.\n"
      example: []
      syntax:
        content:
          CSharp: public DirectoryInfo GetDirectoryInfo(string path)
          VB: Public Function GetDirectoryInfo(path As String) As DirectoryInfo
        parameters:
        - id: path
          type: System.String
          description: The path of the directory.
        return:
          type: System.IO.DirectoryInfo
          description: An object containing information about the directory.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryInfo*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.IO.DirectoryInfo: 
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileInfo(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileInfo(System.String)
      language: CSharp
      name:
        CSharp: GetFileInfo(String)
        VB: GetFileInfo(String)
      nameWithType:
        CSharp: AnonymousFilesystem.GetFileInfo(String)
        VB: AnonymousFilesystem.GetFileInfo(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileInfo(System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileInfo(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: GetFileInfo
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 102
      summary: "\nRetrieves a <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> object that contains information about a specified file.\n"
      example: []
      syntax:
        content:
          CSharp: public FileInfo GetFileInfo(string path)
          VB: Public Function GetFileInfo(path As String) As FileInfo
        parameters:
        - id: path
          type: System.String
          description: The path of the file.
        return:
          type: System.IO.FileInfo
          description: An object containing information about the file.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileInfo*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.IO.FileInfo: 
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileStream(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileStream(System.String)
      language: CSharp
      name:
        CSharp: GetFileStream(String)
        VB: GetFileStream(String)
      nameWithType:
        CSharp: AnonymousFilesystem.GetFileStream(String)
        VB: AnonymousFilesystem.GetFileStream(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileStream(System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileStream(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: GetFileStream
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 116
      summary: "\nRetrieves a read-only file stream for the specified file.\n"
      example: []
      syntax:
        content:
          CSharp: public FileStream GetFileStream(string path)
          VB: Public Function GetFileStream(path As String) As FileStream
        parameters:
        - id: path
          type: System.String
          description: The path of the file to read.
        return:
          type: System.IO.FileStream
          description: A read-only file stream.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileStream*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFilePermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFilePermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
      language: CSharp
      name:
        CSharp: GetFilePermissions(String, IFtpIdentity)
        VB: GetFilePermissions(String, IFtpIdentity)
      nameWithType:
        CSharp: AnonymousFilesystem.GetFilePermissions(String, IFtpIdentity)
        VB: AnonymousFilesystem.GetFilePermissions(String, IFtpIdentity)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFilePermissions(System.String, DouglasDwyer.ExtensibleFtp.IFtpIdentity)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFilePermissions(System.String, DouglasDwyer.ExtensibleFtp.IFtpIdentity)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: GetFilePermissions
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 131
      summary: "\nGets the permission listing for the specified file.\n"
      example: []
      syntax:
        content:
          CSharp: public string GetFilePermissions(string path, IFtpIdentity identity)
          VB: Public Function GetFilePermissions(path As String, identity As IFtpIdentity) As String
        parameters:
        - id: path
          type: System.String
          description: The path of the file to get information about.
        - id: identity
          type: DouglasDwyer.ExtensibleFtp.IFtpIdentity
          description: The identity of the current user.
        return:
          type: System.String
          description: A unix-formatted permission string.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFilePermissions*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryPermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryPermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
      language: CSharp
      name:
        CSharp: GetDirectoryPermissions(String, IFtpIdentity)
        VB: GetDirectoryPermissions(String, IFtpIdentity)
      nameWithType:
        CSharp: AnonymousFilesystem.GetDirectoryPermissions(String, IFtpIdentity)
        VB: AnonymousFilesystem.GetDirectoryPermissions(String, IFtpIdentity)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryPermissions(System.String, DouglasDwyer.ExtensibleFtp.IFtpIdentity)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryPermissions(System.String, DouglasDwyer.ExtensibleFtp.IFtpIdentity)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: GetDirectoryPermissions
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 141
      summary: "\nGets the permission listing for the specified directory.\n"
      example: []
      syntax:
        content:
          CSharp: public string GetDirectoryPermissions(string path, IFtpIdentity identity)
          VB: Public Function GetDirectoryPermissions(path As String, identity As IFtpIdentity) As String
        parameters:
        - id: path
          type: System.String
          description: The path of the directory to get information about.
        - id: identity
          type: DouglasDwyer.ExtensibleFtp.IFtpIdentity
          description: The identity of the current user.
        return:
          type: System.String
          description: A unix-formatted permission string.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryPermissions*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteFile(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteFile(System.String)
      language: CSharp
      name:
        CSharp: DeleteFile(String)
        VB: DeleteFile(String)
      nameWithType:
        CSharp: AnonymousFilesystem.DeleteFile(String)
        VB: AnonymousFilesystem.DeleteFile(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteFile(System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteFile(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: DeleteFile
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 149
      summary: "\nDeletes a file.\n"
      example: []
      syntax:
        content:
          CSharp: public void DeleteFile(string path)
          VB: Public Sub DeleteFile(path As String)
        parameters:
        - id: path
          type: System.String
          description: The path of the file to delete.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteFile*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteDirectory(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteDirectory(System.String)
      language: CSharp
      name:
        CSharp: DeleteDirectory(String)
        VB: DeleteDirectory(String)
      nameWithType:
        CSharp: AnonymousFilesystem.DeleteDirectory(String)
        VB: AnonymousFilesystem.DeleteDirectory(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteDirectory(System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteDirectory(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: DeleteDirectory
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 162
      summary: "\nDeletes a directory recursively, removing all files and subdirectories.\n"
      example: []
      syntax:
        content:
          CSharp: public void DeleteDirectory(string path)
          VB: Public Sub DeleteDirectory(path As String)
        parameters:
        - id: path
          type: System.String
          description: The path of the directory to delete.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteDirectory*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateDirectory(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateDirectory(System.String)
      language: CSharp
      name:
        CSharp: CreateDirectory(String)
        VB: CreateDirectory(String)
      nameWithType:
        CSharp: AnonymousFilesystem.CreateDirectory(String)
        VB: AnonymousFilesystem.CreateDirectory(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateDirectory(System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateDirectory(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: CreateDirectory
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 175
      summary: "\nCreates a new directory.\n"
      example: []
      syntax:
        content:
          CSharp: public void CreateDirectory(string path)
          VB: Public Sub CreateDirectory(path As String)
        parameters:
        - id: path
          type: System.String
          description: The name of the directory to create.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateDirectory*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateFile(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateFile(System.String)
      language: CSharp
      name:
        CSharp: CreateFile(String)
        VB: CreateFile(String)
      nameWithType:
        CSharp: AnonymousFilesystem.CreateFile(String)
        VB: AnonymousFilesystem.CreateFile(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateFile(System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateFile(System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: CreateFile
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 189
      summary: "\nCreates a new file.\n"
      example: []
      syntax:
        content:
          CSharp: public FileStream CreateFile(string path)
          VB: Public Function CreateFile(path As String) As FileStream
        parameters:
        - id: path
          type: System.String
          description: The path of the file to create.
        return:
          type: System.IO.FileStream
          description: A file stream for writing to the new file.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateFile*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveDirectory(System.String,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveDirectory(System.String,System.String)
      language: CSharp
      name:
        CSharp: MoveDirectory(String, String)
        VB: MoveDirectory(String, String)
      nameWithType:
        CSharp: AnonymousFilesystem.MoveDirectory(String, String)
        VB: AnonymousFilesystem.MoveDirectory(String, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveDirectory(System.String, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveDirectory(System.String, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: MoveDirectory
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 203
      summary: "\nMoves a directory, changing its path.\n"
      example: []
      syntax:
        content:
          CSharp: public void MoveDirectory(string oldPath, string newPath)
          VB: Public Sub MoveDirectory(oldPath As String, newPath As String)
        parameters:
        - id: oldPath
          type: System.String
          description: The current path of the directory.
        - id: newPath
          type: System.String
          description: The new path of the directory.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveDirectory*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory(System.String,System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveFile(System.String,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveFile(System.String,System.String)
      language: CSharp
      name:
        CSharp: MoveFile(String, String)
        VB: MoveFile(String, String)
      nameWithType:
        CSharp: AnonymousFilesystem.MoveFile(String, String)
        VB: AnonymousFilesystem.MoveFile(String, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveFile(System.String, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveFile(System.String, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: MoveFile
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousFilesystem.cs
        startLine: 222
      summary: "\nMoves a file, changing its path.\n"
      example: []
      syntax:
        content:
          CSharp: public void MoveFile(string oldPath, string newPath)
          VB: Public Sub MoveFile(oldPath As String, newPath As String)
        parameters:
        - id: oldPath
          type: System.String
          description: The current path of the file.
        - id: newPath
          type: System.String
          description: The new path of the file.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveFile*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile(System.String,System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity
    commentId: T:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity
    language: CSharp
    name:
      CSharp: AnonymousIdentity
      VB: AnonymousIdentity
    nameWithType:
      CSharp: AnonymousIdentity
      VB: AnonymousIdentity
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity
      VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Anonymous
    source:
      id: AnonymousIdentity
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousIdentity.cs
      startLine: 5
    summary: "\nRepresents the identity of an anonymous user who has complete control over any files in a certain root directory.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AnonymousIdentity : IFtpIdentity'
        VB: >-
          Public Class AnonymousIdentity

              Implements IFtpIdentity
    inheritance:
    - System.Object
    implements:
    - DouglasDwyer.ExtensibleFtp.IFtpIdentity
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.Filesystem
      commentId: P:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.Filesystem
      language: CSharp
      name:
        CSharp: Filesystem
        VB: Filesystem
      nameWithType:
        CSharp: AnonymousIdentity.Filesystem
        VB: AnonymousIdentity.Filesystem
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.Filesystem
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.Filesystem
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: Filesystem
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousIdentity.cs
        startLine: 10
      summary: "\nThe filesystem that this user has access to.\n"
      example: []
      syntax:
        content:
          CSharp: public IFtpFilesystem Filesystem { get; set; }
          VB: Public Property Filesystem As IFtpFilesystem
        parameters: []
        return:
          type: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.Filesystem*
      implements:
      - DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.#ctor(System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.#ctor(System.String)
      language: CSharp
      name:
        CSharp: AnonymousIdentity(String)
        VB: AnonymousIdentity(String)
      nameWithType:
        CSharp: AnonymousIdentity.AnonymousIdentity(String)
        VB: AnonymousIdentity.AnonymousIdentity(String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.AnonymousIdentity(System.String)
        VB: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.AnonymousIdentity(System.String)
      type: Constructor
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Anonymous
      source:
        id: .ctor
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Anonymous\AnonymousIdentity.cs
        startLine: 16
      summary: "\nCreates a new instance of <xref href=\"DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity\" data-throw-if-not-resolved=\"false\"></xref> with access to the specified directory and its subdirectories.\n"
      example: []
      syntax:
        content:
          CSharp: public AnonymousIdentity(string rootDirectory)
          VB: Public Sub New(rootDirectory As String)
        parameters:
        - id: rootDirectory
          type: System.String
          description: The root directory this user should have access to.
      overload: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity: 
- id: DouglasDwyer.ExtensibleFtp.Commands
  commentId: N:DouglasDwyer.ExtensibleFtp.Commands
  language: CSharp
  name:
    CSharp: DouglasDwyer.ExtensibleFtp.Commands
    VB: DouglasDwyer.ExtensibleFtp.Commands
  nameWithType:
    CSharp: DouglasDwyer.ExtensibleFtp.Commands
    VB: DouglasDwyer.ExtensibleFtp.Commands
  qualifiedName:
    CSharp: DouglasDwyer.ExtensibleFtp.Commands
    VB: DouglasDwyer.ExtensibleFtp.Commands
  type: Namespace
  assemblies:
  - ExtensibleFtp
  modifiers: {}
  items:
  - id: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.CwdCommand
    language: CSharp
    name:
      CSharp: CwdCommand
      VB: CwdCommand
    nameWithType:
      CSharp: CwdCommand
      VB: CwdCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: CwdCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\CwdCommand.cs
      startLine: 10
    syntax:
      content:
        CSharp: 'public class CwdCommand : FtpCommand'
        VB: >-
          Public Class CwdCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: CwdCommand.CommandName
        VB: CwdCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\CwdCommand.cs
        startLine: 12
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: CwdCommand.Execute(ExtensibleFtpUser, String)
        VB: CwdCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\CwdCommand.cs
        startLine: 14
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string arguments)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, arguments As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: arguments
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.DeleCommand
    language: CSharp
    name:
      CSharp: DeleCommand
      VB: DeleCommand
    nameWithType:
      CSharp: DeleCommand
      VB: DeleCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: DeleCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\DeleCommand.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class DeleCommand : FtpCommand'
        VB: >-
          Public Class DeleCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: DeleCommand.CommandName
        VB: DeleCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\DeleCommand.cs
        startLine: 10
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: DeleCommand.Execute(ExtensibleFtpUser, String)
        VB: DeleCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\DeleCommand.cs
        startLine: 12
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string path)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, path As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: path
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.ListCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.ListCommand
    language: CSharp
    name:
      CSharp: ListCommand
      VB: ListCommand
    nameWithType:
      CSharp: ListCommand
      VB: ListCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.ListCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.ListCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: ListCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\ListCommand.cs
      startLine: 11
    syntax:
      content:
        CSharp: 'public class ListCommand : FtpCommand'
        VB: >-
          Public Class ListCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.ListCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: ListCommand.CommandName
        VB: ListCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\ListCommand.cs
        startLine: 13
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.ListCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: ListCommand.Execute(ExtensibleFtpUser, String)
        VB: ListCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\ListCommand.cs
        startLine: 15
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string pathname)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, pathname As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: pathname
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.MkdCommand
    language: CSharp
    name:
      CSharp: MkdCommand
      VB: MkdCommand
    nameWithType:
      CSharp: MkdCommand
      VB: MkdCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: MkdCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\MkdCommand.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class MkdCommand : FtpCommand'
        VB: >-
          Public Class MkdCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: MkdCommand.CommandName
        VB: MkdCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\MkdCommand.cs
        startLine: 10
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: MkdCommand.Execute(ExtensibleFtpUser, String)
        VB: MkdCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\MkdCommand.cs
        startLine: 12
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string path)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, path As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: path
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand
    language: CSharp
    name:
      CSharp: NoOpCommand
      VB: NoOpCommand
    nameWithType:
      CSharp: NoOpCommand
      VB: NoOpCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: NoOpCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\NoOpCommand.cs
      startLine: 7
    syntax:
      content:
        CSharp: 'public class NoOpCommand : FtpCommand'
        VB: >-
          Public Class NoOpCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: NoOpCommand.CommandName
        VB: NoOpCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\NoOpCommand.cs
        startLine: 9
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: NoOpCommand.Execute(ExtensibleFtpUser, String)
        VB: NoOpCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\NoOpCommand.cs
        startLine: 11
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string arguments)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, arguments As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: arguments
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.PassCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.PassCommand
    language: CSharp
    name:
      CSharp: PassCommand
      VB: PassCommand
    nameWithType:
      CSharp: PassCommand
      VB: PassCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.PassCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.PassCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: PassCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\PassCommand.cs
      startLine: 7
    syntax:
      content:
        CSharp: 'public class PassCommand : FtpCommand'
        VB: >-
          Public Class PassCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.PassCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: PassCommand.CommandName
        VB: PassCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\PassCommand.cs
        startLine: 9
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.PassCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: PassCommand.Execute(ExtensibleFtpUser, String)
        VB: PassCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\PassCommand.cs
        startLine: 11
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string arguments)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, arguments As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: arguments
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.PasvCommand
    language: CSharp
    name:
      CSharp: PasvCommand
      VB: PasvCommand
    nameWithType:
      CSharp: PasvCommand
      VB: PasvCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: PasvCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\PasvCommand.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class PasvCommand : FtpCommand'
        VB: >-
          Public Class PasvCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: PasvCommand.CommandName
        VB: PasvCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\PasvCommand.cs
        startLine: 10
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: PasvCommand.Execute(ExtensibleFtpUser, String)
        VB: PasvCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\PasvCommand.cs
        startLine: 12
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string arguments)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, arguments As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: arguments
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.PortCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.PortCommand
    language: CSharp
    name:
      CSharp: PortCommand
      VB: PortCommand
    nameWithType:
      CSharp: PortCommand
      VB: PortCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.PortCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.PortCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: PortCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\PortCommand.cs
      startLine: 7
    syntax:
      content:
        CSharp: 'public class PortCommand : FtpCommand'
        VB: >-
          Public Class PortCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.PortCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: PortCommand.CommandName
        VB: PortCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\PortCommand.cs
        startLine: 9
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.PortCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: PortCommand.Execute(ExtensibleFtpUser, String)
        VB: PortCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\PortCommand.cs
        startLine: 11
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string arguments)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, arguments As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: arguments
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.PwdCommand
    language: CSharp
    name:
      CSharp: PwdCommand
      VB: PwdCommand
    nameWithType:
      CSharp: PwdCommand
      VB: PwdCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: PwdCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\PwdCommand.cs
      startLine: 7
    syntax:
      content:
        CSharp: 'public class PwdCommand : FtpCommand'
        VB: >-
          Public Class PwdCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: PwdCommand.CommandName
        VB: PwdCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\PwdCommand.cs
        startLine: 9
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: PwdCommand.Execute(ExtensibleFtpUser, String)
        VB: PwdCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\PwdCommand.cs
        startLine: 11
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string arguments)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, arguments As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: arguments
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.QuitCommand
    language: CSharp
    name:
      CSharp: QuitCommand
      VB: QuitCommand
    nameWithType:
      CSharp: QuitCommand
      VB: QuitCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: QuitCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\QuitCommand.cs
      startLine: 7
    syntax:
      content:
        CSharp: 'public sealed class QuitCommand : FtpCommand'
        VB: >-
          Public NotInheritable Class QuitCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: QuitCommand.CommandName
        VB: QuitCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\QuitCommand.cs
        startLine: 9
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: QuitCommand.Execute(ExtensibleFtpUser, String)
        VB: QuitCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\QuitCommand.cs
        startLine: 11
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string arguments)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, arguments As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: arguments
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.RetrCommand
    language: CSharp
    name:
      CSharp: RetrCommand
      VB: RetrCommand
    nameWithType:
      CSharp: RetrCommand
      VB: RetrCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: RetrCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RetrCommand.cs
      startLine: 11
    syntax:
      content:
        CSharp: 'public class RetrCommand : FtpCommand'
        VB: >-
          Public Class RetrCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: RetrCommand.CommandName
        VB: RetrCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RetrCommand.cs
        startLine: 13
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: RetrCommand.Execute(ExtensibleFtpUser, String)
        VB: RetrCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RetrCommand.cs
        startLine: 15
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string arguments)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, arguments As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: arguments
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand
    language: CSharp
    name:
      CSharp: RmdaCommand
      VB: RmdaCommand
    nameWithType:
      CSharp: RmdaCommand
      VB: RmdaCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: RmdaCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RmdaCommand.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class RmdaCommand : FtpCommand'
        VB: >-
          Public Class RmdaCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: RmdaCommand.CommandName
        VB: RmdaCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RmdaCommand.cs
        startLine: 10
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: RmdaCommand.Execute(ExtensibleFtpUser, String)
        VB: RmdaCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RmdaCommand.cs
        startLine: 12
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string path)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, path As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: path
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.RmdCommand
    language: CSharp
    name:
      CSharp: RmdCommand
      VB: RmdCommand
    nameWithType:
      CSharp: RmdCommand
      VB: RmdCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: RmdCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RmdCommand.cs
      startLine: 9
    syntax:
      content:
        CSharp: 'public class RmdCommand : FtpCommand'
        VB: >-
          Public Class RmdCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: RmdCommand.CommandName
        VB: RmdCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RmdCommand.cs
        startLine: 11
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: RmdCommand.Execute(ExtensibleFtpUser, String)
        VB: RmdCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RmdCommand.cs
        startLine: 13
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string path)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, path As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: path
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand
    language: CSharp
    name:
      CSharp: RnfrCommand
      VB: RnfrCommand
    nameWithType:
      CSharp: RnfrCommand
      VB: RnfrCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: RnfrCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RnfrCommand.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class RnfrCommand : FtpCommand'
        VB: >-
          Public Class RnfrCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: RnfrCommand.CommandName
        VB: RnfrCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RnfrCommand.cs
        startLine: 10
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: RnfrCommand.Execute(ExtensibleFtpUser, String)
        VB: RnfrCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RnfrCommand.cs
        startLine: 12
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string path)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, path As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: path
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.RntoCommand
    language: CSharp
    name:
      CSharp: RntoCommand
      VB: RntoCommand
    nameWithType:
      CSharp: RntoCommand
      VB: RntoCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: RntoCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RntoCommand.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class RntoCommand : FtpCommand'
        VB: >-
          Public Class RntoCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: RntoCommand.CommandName
        VB: RntoCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RntoCommand.cs
        startLine: 10
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: RntoCommand.Execute(ExtensibleFtpUser, String)
        VB: RntoCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\RntoCommand.cs
        startLine: 12
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string newPath)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, newPath As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: newPath
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.SizeCommand
    language: CSharp
    name:
      CSharp: SizeCommand
      VB: SizeCommand
    nameWithType:
      CSharp: SizeCommand
      VB: SizeCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: SizeCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\SizeCommand.cs
      startLine: 9
    syntax:
      content:
        CSharp: 'public class SizeCommand : FtpCommand'
        VB: >-
          Public Class SizeCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: SizeCommand.CommandName
        VB: SizeCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\SizeCommand.cs
        startLine: 11
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: SizeCommand.Execute(ExtensibleFtpUser, String)
        VB: SizeCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\SizeCommand.cs
        startLine: 13
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string path)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, path As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: path
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.StorCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.StorCommand
    language: CSharp
    name:
      CSharp: StorCommand
      VB: StorCommand
    nameWithType:
      CSharp: StorCommand
      VB: StorCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.StorCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.StorCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: StorCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\StorCommand.cs
      startLine: 11
    syntax:
      content:
        CSharp: 'public class StorCommand : FtpCommand'
        VB: >-
          Public Class StorCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.StorCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: StorCommand.CommandName
        VB: StorCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\StorCommand.cs
        startLine: 13
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.StorCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: StorCommand.Execute(ExtensibleFtpUser, String)
        VB: StorCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\StorCommand.cs
        startLine: 15
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string arguments)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, arguments As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: arguments
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.TypeCommand
    language: CSharp
    name:
      CSharp: TypeCommand
      VB: TypeCommand
    nameWithType:
      CSharp: TypeCommand
      VB: TypeCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: TypeCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\TypeCommand.cs
      startLine: 7
    syntax:
      content:
        CSharp: 'public class TypeCommand : FtpCommand'
        VB: >-
          Public Class TypeCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: TypeCommand.CommandName
        VB: TypeCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\TypeCommand.cs
        startLine: 9
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: TypeCommand.Execute(ExtensibleFtpUser, String)
        VB: TypeCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\TypeCommand.cs
        startLine: 11
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string arguments)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, arguments As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: arguments
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: DouglasDwyer.ExtensibleFtp.Commands.UserCommand
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.UserCommand
    language: CSharp
    name:
      CSharp: UserCommand
      VB: UserCommand
    nameWithType:
      CSharp: UserCommand
      VB: UserCommand
    qualifiedName:
      CSharp: DouglasDwyer.ExtensibleFtp.Commands.UserCommand
      VB: DouglasDwyer.ExtensibleFtp.Commands.UserCommand
    type: Class
    assemblies:
    - ExtensibleFtp
    namespace: DouglasDwyer.ExtensibleFtp.Commands
    source:
      id: UserCommand
      path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\UserCommand.cs
      startLine: 6
    syntax:
      content:
        CSharp: 'public class UserCommand : FtpCommand'
        VB: >-
          Public Class UserCommand

              Inherits FtpCommand
    inheritance:
    - System.Object
    - DouglasDwyer.ExtensibleFtp.FtpCommand
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.CommandName
      commentId: P:DouglasDwyer.ExtensibleFtp.Commands.UserCommand.CommandName
      language: CSharp
      name:
        CSharp: CommandName
        VB: CommandName
      nameWithType:
        CSharp: UserCommand.CommandName
        VB: UserCommand.CommandName
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.CommandName
        VB: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.CommandName
      type: Property
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: CommandName
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\UserCommand.cs
        startLine: 8
      syntax:
        content:
          CSharp: public override string CommandName { get; }
          VB: Public Overrides ReadOnly Property CommandName As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.CommandName*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      commentId: M:DouglasDwyer.ExtensibleFtp.Commands.UserCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      language: CSharp
      name:
        CSharp: Execute(ExtensibleFtpUser, String)
        VB: Execute(ExtensibleFtpUser, String)
      nameWithType:
        CSharp: UserCommand.Execute(ExtensibleFtpUser, String)
        VB: UserCommand.Execute(ExtensibleFtpUser, String)
      qualifiedName:
        CSharp: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
        VB: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser, System.String)
      type: Method
      assemblies:
      - ExtensibleFtp
      namespace: DouglasDwyer.ExtensibleFtp.Commands
      source:
        id: Execute
        path: D:\Projects\ExtensibleFtp\ExtensibleFtp\Commands\UserCommand.cs
        startLine: 10
      syntax:
        content:
          CSharp: public override void Execute(ExtensibleFtpUser user, string arguments)
          VB: Public Overrides Sub Execute(user As ExtensibleFtpUser, arguments As String)
        parameters:
        - id: user
          type: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        - id: arguments
          type: System.String
      overload: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.Execute*
      overridden: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  DouglasDwyer.ExtensibleFtp:
    name:
      CSharp:
      - name: DouglasDwyer.ExtensibleFtp
        nameWithType: DouglasDwyer.ExtensibleFtp
        qualifiedName: DouglasDwyer.ExtensibleFtp
      VB:
      - name: DouglasDwyer.ExtensibleFtp
        nameWithType: DouglasDwyer.ExtensibleFtp
        qualifiedName: DouglasDwyer.ExtensibleFtp
    isDefinition: true
    commentId: N:DouglasDwyer.ExtensibleFtp
  DouglasDwyer.ExtensibleFtp.IDataConnector:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IDataConnector
        name: IDataConnector
        nameWithType: IDataConnector
        qualifiedName: DouglasDwyer.ExtensibleFtp.IDataConnector
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IDataConnector
        name: IDataConnector
        nameWithType: IDataConnector
        qualifiedName: DouglasDwyer.ExtensibleFtp.IDataConnector
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp
    commentId: T:DouglasDwyer.ExtensibleFtp.IDataConnector
  System.IDisposable:
    name:
      CSharp:
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      VB:
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.IDisposable
  System.Net:
    name:
      CSharp:
      - name: System.Net
        nameWithType: System.Net
        qualifiedName: System.Net
        isExternal: true
      VB:
      - name: System.Net
        nameWithType: System.Net
        qualifiedName: System.Net
    isDefinition: true
    commentId: N:System.Net
  System.Net.IPEndPoint:
    name:
      CSharp:
      - id: System.Net.IPEndPoint
        name: IPEndPoint
        nameWithType: IPEndPoint
        qualifiedName: System.Net.IPEndPoint
        isExternal: true
      VB:
      - id: System.Net.IPEndPoint
        name: IPEndPoint
        nameWithType: IPEndPoint
        qualifiedName: System.Net.IPEndPoint
        isExternal: true
    isDefinition: true
    parent: System.Net
    commentId: T:System.Net.IPEndPoint
  DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ConnectionEndpoint*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ConnectionEndpoint*
        name: ConnectionEndpoint
        nameWithType: ActiveDataConnector.ConnectionEndpoint
        qualifiedName: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ConnectionEndpoint
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ConnectionEndpoint*
        name: ConnectionEndpoint
        nameWithType: ActiveDataConnector.ConnectionEndpoint
        qualifiedName: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ConnectionEndpoint
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ConnectionEndpoint
  DouglasDwyer.ExtensibleFtp.ActiveDataConnector.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.#ctor*
        name: ActiveDataConnector
        nameWithType: ActiveDataConnector.ActiveDataConnector
        qualifiedName: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ActiveDataConnector
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.#ctor*
        name: ActiveDataConnector
        nameWithType: ActiveDataConnector.ActiveDataConnector
        qualifiedName: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.ActiveDataConnector
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ActiveDataConnector.#ctor
  System.Net.Sockets.TcpClient:
    name:
      CSharp:
      - id: System.Net.Sockets.TcpClient
        name: TcpClient
        nameWithType: TcpClient
        qualifiedName: System.Net.Sockets.TcpClient
        isExternal: true
      VB:
      - id: System.Net.Sockets.TcpClient
        name: TcpClient
        nameWithType: TcpClient
        qualifiedName: System.Net.Sockets.TcpClient
        isExternal: true
    isDefinition: true
    parent: System.Net.Sockets
    commentId: T:System.Net.Sockets.TcpClient
  System.Threading.Tasks.Task`1:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Threading.Tasks.Task`1
  System.Threading.Tasks:
    name:
      CSharp:
      - name: System.Threading.Tasks
        nameWithType: System.Threading.Tasks
        qualifiedName: System.Threading.Tasks
        isExternal: true
      VB:
      - name: System.Threading.Tasks
        nameWithType: System.Threading.Tasks
        qualifiedName: System.Threading.Tasks
    isDefinition: true
    commentId: N:System.Threading.Tasks
  System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Net.Sockets.TcpClient
        name: TcpClient
        nameWithType: TcpClient
        qualifiedName: System.Net.Sockets.TcpClient
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Net.Sockets.TcpClient
        name: TcpClient
        nameWithType: TcpClient
        qualifiedName: System.Net.Sockets.TcpClient
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
  DouglasDwyer.ExtensibleFtp.ActiveDataConnector.CreateDataConnectionAsync*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.CreateDataConnectionAsync*
        name: CreateDataConnectionAsync
        nameWithType: ActiveDataConnector.CreateDataConnectionAsync
        qualifiedName: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.CreateDataConnectionAsync
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.CreateDataConnectionAsync*
        name: CreateDataConnectionAsync
        nameWithType: ActiveDataConnector.CreateDataConnectionAsync
        qualifiedName: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.CreateDataConnectionAsync
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ActiveDataConnector.CreateDataConnectionAsync
  DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync
        name: CreateDataConnectionAsync
        nameWithType: IDataConnector.CreateDataConnectionAsync
        qualifiedName: DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync
        name: CreateDataConnectionAsync
        nameWithType: IDataConnector.CreateDataConnectionAsync
        qualifiedName: DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IDataConnector
    commentId: M:DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync
  DouglasDwyer.ExtensibleFtp.ActiveDataConnector.Dispose*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.Dispose*
        name: Dispose
        nameWithType: ActiveDataConnector.Dispose
        qualifiedName: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.Dispose
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.Dispose*
        name: Dispose
        nameWithType: ActiveDataConnector.Dispose
        qualifiedName: DouglasDwyer.ExtensibleFtp.ActiveDataConnector.Dispose
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ActiveDataConnector.Dispose
  System.IDisposable.Dispose:
    name:
      CSharp:
      - id: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        qualifiedName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        qualifiedName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.IDisposable
    commentId: M:System.IDisposable.Dispose
  DouglasDwyer.ExtensibleFtp.ActiveDataConnector:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector
        name: ActiveDataConnector
        nameWithType: ActiveDataConnector
        qualifiedName: DouglasDwyer.ExtensibleFtp.ActiveDataConnector
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ActiveDataConnector
        name: ActiveDataConnector
        nameWithType: ActiveDataConnector
        qualifiedName: DouglasDwyer.ExtensibleFtp.ActiveDataConnector
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.ActiveDataConnector
  DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync*
        name: CreateDataConnectionAsync
        nameWithType: IDataConnector.CreateDataConnectionAsync
        qualifiedName: DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync*
        name: CreateDataConnectionAsync
        nameWithType: IDataConnector.CreateDataConnectionAsync
        qualifiedName: DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IDataConnector.CreateDataConnectionAsync
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer
        name: ExtensibleFtpServer
        nameWithType: ExtensibleFtpServer
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer
        name: ExtensibleFtpServer
        nameWithType: ExtensibleFtpServer
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp
    commentId: T:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{DouglasDwyer.ExtensibleFtp.FtpCommand}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: DouglasDwyer.ExtensibleFtp.FtpCommand
        name: FtpCommand
        nameWithType: FtpCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpCommand
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: DouglasDwyer.ExtensibleFtp.FtpCommand
        name: FtpCommand
        nameWithType: FtpCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpCommand
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{DouglasDwyer.ExtensibleFtp.FtpCommand}
  DouglasDwyer.ExtensibleFtp.IFtpAuthenticator:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator
        name: IFtpAuthenticator
        nameWithType: IFtpAuthenticator
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator
        name: IFtpAuthenticator
        nameWithType: IFtpAuthenticator
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp
    commentId: T:DouglasDwyer.ExtensibleFtp.IFtpAuthenticator
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Authenticator*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Authenticator*
        name: Authenticator
        nameWithType: ExtensibleFtpServer.Authenticator
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Authenticator
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Authenticator*
        name: Authenticator
        nameWithType: ExtensibleFtpServer.Authenticator
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Authenticator
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Authenticator
  System.Collections.Generic.IList`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IList`1
  System.Collections.Generic.IList{DouglasDwyer.ExtensibleFtp.FtpCommand}:
    name:
      CSharp:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: DouglasDwyer.ExtensibleFtp.FtpCommand
        name: FtpCommand
        nameWithType: FtpCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpCommand
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: DouglasDwyer.ExtensibleFtp.FtpCommand
        name: FtpCommand
        nameWithType: FtpCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpCommand
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IList`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IList{DouglasDwyer.ExtensibleFtp.FtpCommand}
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.CommandSet*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.CommandSet*
        name: CommandSet
        nameWithType: ExtensibleFtpServer.CommandSet
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.CommandSet
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.CommandSet*
        name: CommandSet
        nameWithType: ExtensibleFtpServer.CommandSet
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.CommandSet
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.CommandSet
  System.Collections.Generic.IList{DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser}:
    name:
      CSharp:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        name: ExtensibleFtpUser
        nameWithType: ExtensibleFtpUser
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        name: ExtensibleFtpUser
        nameWithType: ExtensibleFtpUser
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IList`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IList{DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser}
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.OnlineUsers*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.OnlineUsers*
        name: OnlineUsers
        nameWithType: ExtensibleFtpServer.OnlineUsers
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.OnlineUsers
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.OnlineUsers*
        name: OnlineUsers
        nameWithType: ExtensibleFtpServer.OnlineUsers
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.OnlineUsers
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.OnlineUsers
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.#ctor*
        name: ExtensibleFtpServer
        nameWithType: ExtensibleFtpServer.ExtensibleFtpServer
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.ExtensibleFtpServer
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.#ctor*
        name: ExtensibleFtpServer
        nameWithType: ExtensibleFtpServer.ExtensibleFtpServer
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.ExtensibleFtpServer
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.#ctor
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Start*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Start*
        name: Start
        nameWithType: ExtensibleFtpServer.Start
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Start
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Start*
        name: Start
        nameWithType: ExtensibleFtpServer.Start
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Start
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Start
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Stop*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Stop*
        name: Stop
        nameWithType: ExtensibleFtpServer.Stop
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Stop
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Stop*
        name: Stop
        nameWithType: ExtensibleFtpServer.Stop
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Stop
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.Stop
  DouglasDwyer.ExtensibleFtp.FtpCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.FtpCommand
        name: FtpCommand
        nameWithType: FtpCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.FtpCommand
        name: FtpCommand
        nameWithType: FtpCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpCommand
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp
    commentId: T:DouglasDwyer.ExtensibleFtp.FtpCommand
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.GetCommand*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.GetCommand*
        name: GetCommand
        nameWithType: ExtensibleFtpServer.GetCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.GetCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.GetCommand*
        name: GetCommand
        nameWithType: ExtensibleFtpServer.GetCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.GetCommand
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpServer.GetCommand
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Host*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Host*
        name: Host
        nameWithType: ExtensibleFtpUser.Host
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Host
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Host*
        name: Host
        nameWithType: ExtensibleFtpUser.Host
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Host
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Host
  DouglasDwyer.ExtensibleFtp.IFtpIdentity:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpIdentity
        name: IFtpIdentity
        nameWithType: IFtpIdentity
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpIdentity
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpIdentity
        name: IFtpIdentity
        nameWithType: IFtpIdentity
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpIdentity
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp
    commentId: T:DouglasDwyer.ExtensibleFtp.IFtpIdentity
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity*
        name: Identity
        nameWithType: ExtensibleFtpUser.Identity
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity*
        name: Identity
        nameWithType: ExtensibleFtpUser.Identity
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity:
    commentId: P:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Identity
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
        name: IFtpFilesystem
        nameWithType: IFtpFilesystem
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
        name: IFtpFilesystem
        nameWithType: IFtpFilesystem
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp
    commentId: T:DouglasDwyer.ExtensibleFtp.IFtpFilesystem
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Filesystem*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Filesystem*
        name: Filesystem
        nameWithType: ExtensibleFtpUser.Filesystem
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Filesystem
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Filesystem*
        name: Filesystem
        nameWithType: ExtensibleFtpUser.Filesystem
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Filesystem
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Filesystem
  DouglasDwyer.ExtensibleFtp.TransferMode:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.TransferMode
        name: TransferMode
        nameWithType: TransferMode
        qualifiedName: DouglasDwyer.ExtensibleFtp.TransferMode
      VB:
      - id: DouglasDwyer.ExtensibleFtp.TransferMode
        name: TransferMode
        nameWithType: TransferMode
        qualifiedName: DouglasDwyer.ExtensibleFtp.TransferMode
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp
    commentId: T:DouglasDwyer.ExtensibleFtp.TransferMode
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.TransferType*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.TransferType*
        name: TransferType
        nameWithType: ExtensibleFtpUser.TransferType
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.TransferType
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.TransferType*
        name: TransferType
        nameWithType: ExtensibleFtpUser.TransferType
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.TransferType
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.TransferType
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.DataClient*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.DataClient*
        name: DataClient
        nameWithType: ExtensibleFtpUser.DataClient
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.DataClient
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.DataClient*
        name: DataClient
        nameWithType: ExtensibleFtpUser.DataClient
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.DataClient
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.DataClient
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.IsLoggedIn*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.IsLoggedIn*
        name: IsLoggedIn
        nameWithType: ExtensibleFtpUser.IsLoggedIn
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.IsLoggedIn
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.IsLoggedIn*
        name: IsLoggedIn
        nameWithType: ExtensibleFtpUser.IsLoggedIn
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.IsLoggedIn
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.IsLoggedIn
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.CurrentDirectory*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.CurrentDirectory*
        name: CurrentDirectory
        nameWithType: ExtensibleFtpUser.CurrentDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.CurrentDirectory
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.CurrentDirectory*
        name: CurrentDirectory
        nameWithType: ExtensibleFtpUser.CurrentDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.CurrentDirectory
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.CurrentDirectory
  System.Net.Sockets:
    name:
      CSharp:
      - name: System.Net.Sockets
        nameWithType: System.Net.Sockets
        qualifiedName: System.Net.Sockets
        isExternal: true
      VB:
      - name: System.Net.Sockets
        nameWithType: System.Net.Sockets
        qualifiedName: System.Net.Sockets
    isDefinition: true
    commentId: N:System.Net.Sockets
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.ControlClient*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.ControlClient*
        name: ControlClient
        nameWithType: ExtensibleFtpUser.ControlClient
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.ControlClient
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.ControlClient*
        name: ControlClient
        nameWithType: ExtensibleFtpUser.ControlClient
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.ControlClient
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.ControlClient
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Stop*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Stop*
        name: Stop
        nameWithType: ExtensibleFtpUser.Stop
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Stop
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Stop*
        name: Stop
        nameWithType: ExtensibleFtpUser.Stop
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Stop
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.Stop
  System.Net.FtpStatusCode:
    name:
      CSharp:
      - id: System.Net.FtpStatusCode
        name: FtpStatusCode
        nameWithType: FtpStatusCode
        qualifiedName: System.Net.FtpStatusCode
        isExternal: true
      VB:
      - id: System.Net.FtpStatusCode
        name: FtpStatusCode
        nameWithType: FtpStatusCode
        qualifiedName: System.Net.FtpStatusCode
        isExternal: true
    isDefinition: true
    parent: System.Net
    commentId: T:System.Net.FtpStatusCode
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse*
        name: SendResponse
        nameWithType: ExtensibleFtpUser.SendResponse
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse*
        name: SendResponse
        nameWithType: ExtensibleFtpUser.SendResponse
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser.SendResponse
  DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        name: ExtensibleFtpUser
        nameWithType: ExtensibleFtpUser
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
      VB:
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        name: ExtensibleFtpUser
        nameWithType: ExtensibleFtpUser
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp
    commentId: T:DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
  DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName*
        name: CommandName
        nameWithType: FtpCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName*
        name: CommandName
        nameWithType: FtpCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
  DouglasDwyer.ExtensibleFtp.FtpCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute*
        name: Execute
        nameWithType: FtpCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute*
        name: Execute
        nameWithType: FtpCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.FtpCommand.Execute
  System.Exception:
    name:
      CSharp:
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      VB:
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Exception
  System.Exception.GetBaseException:
    name:
      CSharp:
      - id: System.Exception.GetBaseException
        name: GetBaseException
        nameWithType: Exception.GetBaseException
        qualifiedName: System.Exception.GetBaseException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetBaseException
        name: GetBaseException
        nameWithType: Exception.GetBaseException
        qualifiedName: System.Exception.GetBaseException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetBaseException
  System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):
    name:
      CSharp:
      - id: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
        name: GetObjectData
        nameWithType: Exception.GetObjectData
        qualifiedName: System.Exception.GetObjectData
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
        name: GetObjectData
        nameWithType: Exception.GetObjectData
        qualifiedName: System.Exception.GetObjectData
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  System.Exception.GetType:
    name:
      CSharp:
      - id: System.Exception.GetType
        name: GetType
        nameWithType: Exception.GetType
        qualifiedName: System.Exception.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetType
        name: GetType
        nameWithType: Exception.GetType
        qualifiedName: System.Exception.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetType
  System.Exception.ToString:
    name:
      CSharp:
      - id: System.Exception.ToString
        name: ToString
        nameWithType: Exception.ToString
        qualifiedName: System.Exception.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.ToString
        name: ToString
        nameWithType: Exception.ToString
        qualifiedName: System.Exception.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.ToString
  System.Exception.Data:
    name:
      CSharp:
      - id: System.Exception.Data
        name: Data
        nameWithType: Exception.Data
        qualifiedName: System.Exception.Data
        isExternal: true
      VB:
      - id: System.Exception.Data
        name: Data
        nameWithType: Exception.Data
        qualifiedName: System.Exception.Data
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Data
  System.Exception.HelpLink:
    name:
      CSharp:
      - id: System.Exception.HelpLink
        name: HelpLink
        nameWithType: Exception.HelpLink
        qualifiedName: System.Exception.HelpLink
        isExternal: true
      VB:
      - id: System.Exception.HelpLink
        name: HelpLink
        nameWithType: Exception.HelpLink
        qualifiedName: System.Exception.HelpLink
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.HelpLink
  System.Exception.HResult:
    name:
      CSharp:
      - id: System.Exception.HResult
        name: HResult
        nameWithType: Exception.HResult
        qualifiedName: System.Exception.HResult
        isExternal: true
      VB:
      - id: System.Exception.HResult
        name: HResult
        nameWithType: Exception.HResult
        qualifiedName: System.Exception.HResult
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.HResult
  System.Exception.InnerException:
    name:
      CSharp:
      - id: System.Exception.InnerException
        name: InnerException
        nameWithType: Exception.InnerException
        qualifiedName: System.Exception.InnerException
        isExternal: true
      VB:
      - id: System.Exception.InnerException
        name: InnerException
        nameWithType: Exception.InnerException
        qualifiedName: System.Exception.InnerException
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.InnerException
  System.Exception.Message:
    name:
      CSharp:
      - id: System.Exception.Message
        name: Message
        nameWithType: Exception.Message
        qualifiedName: System.Exception.Message
        isExternal: true
      VB:
      - id: System.Exception.Message
        name: Message
        nameWithType: Exception.Message
        qualifiedName: System.Exception.Message
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Message
  System.Exception.Source:
    name:
      CSharp:
      - id: System.Exception.Source
        name: Source
        nameWithType: Exception.Source
        qualifiedName: System.Exception.Source
        isExternal: true
      VB:
      - id: System.Exception.Source
        name: Source
        nameWithType: Exception.Source
        qualifiedName: System.Exception.Source
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Source
  System.Exception.StackTrace:
    name:
      CSharp:
      - id: System.Exception.StackTrace
        name: StackTrace
        nameWithType: Exception.StackTrace
        qualifiedName: System.Exception.StackTrace
        isExternal: true
      VB:
      - id: System.Exception.StackTrace
        name: StackTrace
        nameWithType: Exception.StackTrace
        qualifiedName: System.Exception.StackTrace
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.StackTrace
  System.Exception.TargetSite:
    name:
      CSharp:
      - id: System.Exception.TargetSite
        name: TargetSite
        nameWithType: Exception.TargetSite
        qualifiedName: System.Exception.TargetSite
        isExternal: true
      VB:
      - id: System.Exception.TargetSite
        name: TargetSite
        nameWithType: Exception.TargetSite
        qualifiedName: System.Exception.TargetSite
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.TargetSite
  System.Exception.SerializeObjectState:
    name:
      CSharp:
      - id: System.Exception.SerializeObjectState
        name: SerializeObjectState
        nameWithType: Exception.SerializeObjectState
        qualifiedName: System.Exception.SerializeObjectState
        isExternal: true
      VB:
      - id: System.Exception.SerializeObjectState
        name: SerializeObjectState
        nameWithType: Exception.SerializeObjectState
        qualifiedName: System.Exception.SerializeObjectState
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: E:System.Exception.SerializeObjectState
  System.Runtime.Serialization:
    name:
      CSharp:
      - name: System.Runtime.Serialization
        nameWithType: System.Runtime.Serialization
        qualifiedName: System.Runtime.Serialization
        isExternal: true
      VB:
      - name: System.Runtime.Serialization
        nameWithType: System.Runtime.Serialization
        qualifiedName: System.Runtime.Serialization
    isDefinition: true
    commentId: N:System.Runtime.Serialization
  System.Runtime.Serialization.ISerializable:
    name:
      CSharp:
      - id: System.Runtime.Serialization.ISerializable
        name: ISerializable
        nameWithType: ISerializable
        qualifiedName: System.Runtime.Serialization.ISerializable
        isExternal: true
      VB:
      - id: System.Runtime.Serialization.ISerializable
        name: ISerializable
        nameWithType: ISerializable
        qualifiedName: System.Runtime.Serialization.ISerializable
        isExternal: true
    isDefinition: true
    parent: System.Runtime.Serialization
    commentId: T:System.Runtime.Serialization.ISerializable
  DouglasDwyer.ExtensibleFtp.FtpException.StatusCode*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.FtpException.StatusCode*
        name: StatusCode
        nameWithType: FtpException.StatusCode
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpException.StatusCode
      VB:
      - id: DouglasDwyer.ExtensibleFtp.FtpException.StatusCode*
        name: StatusCode
        nameWithType: FtpException.StatusCode
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpException.StatusCode
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.FtpException.StatusCode
  DouglasDwyer.ExtensibleFtp.FtpException:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.FtpException
        name: FtpException
        nameWithType: FtpException
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpException
      VB:
      - id: DouglasDwyer.ExtensibleFtp.FtpException
        name: FtpException
        nameWithType: FtpException
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpException
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.FtpException
  DouglasDwyer.ExtensibleFtp.FtpException.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.FtpException.#ctor*
        name: FtpException
        nameWithType: FtpException.FtpException
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpException.FtpException
      VB:
      - id: DouglasDwyer.ExtensibleFtp.FtpException.#ctor*
        name: FtpException
        nameWithType: FtpException.FtpException
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpException.FtpException
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.FtpException.#ctor
  DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser*
        name: AuthenticateUser
        nameWithType: IFtpAuthenticator.AuthenticateUser
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser*
        name: AuthenticateUser
        nameWithType: IFtpAuthenticator.AuthenticateUser
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists*
        name: DirectoryExists
        nameWithType: IFtpFilesystem.DirectoryExists
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists*
        name: DirectoryExists
        nameWithType: IFtpFilesystem.DirectoryExists
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists*
        name: FileExists
        nameWithType: IFtpFilesystem.FileExists
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists*
        name: FileExists
        nameWithType: IFtpFilesystem.FileExists
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists
  System.String[]:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles*
        name: GetFiles
        nameWithType: IFtpFilesystem.GetFiles
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles*
        name: GetFiles
        nameWithType: IFtpFilesystem.GetFiles
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories*
        name: GetSubdirectories
        nameWithType: IFtpFilesystem.GetSubdirectories
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories*
        name: GetSubdirectories
        nameWithType: IFtpFilesystem.GetSubdirectories
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories
  System.IO.DirectoryInfo:
    name:
      CSharp:
      - id: System.IO.DirectoryInfo
        name: DirectoryInfo
        nameWithType: DirectoryInfo
        qualifiedName: System.IO.DirectoryInfo
        isExternal: true
      VB:
      - id: System.IO.DirectoryInfo
        name: DirectoryInfo
        nameWithType: DirectoryInfo
        qualifiedName: System.IO.DirectoryInfo
        isExternal: true
    isDefinition: true
    parent: System.IO
    commentId: T:System.IO.DirectoryInfo
  System.IO:
    name:
      CSharp:
      - name: System.IO
        nameWithType: System.IO
        qualifiedName: System.IO
        isExternal: true
      VB:
      - name: System.IO
        nameWithType: System.IO
        qualifiedName: System.IO
    isDefinition: true
    commentId: N:System.IO
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo*
        name: GetDirectoryInfo
        nameWithType: IFtpFilesystem.GetDirectoryInfo
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo*
        name: GetDirectoryInfo
        nameWithType: IFtpFilesystem.GetDirectoryInfo
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo
  System.IO.FileInfo:
    name:
      CSharp:
      - id: System.IO.FileInfo
        name: FileInfo
        nameWithType: FileInfo
        qualifiedName: System.IO.FileInfo
        isExternal: true
      VB:
      - id: System.IO.FileInfo
        name: FileInfo
        nameWithType: FileInfo
        qualifiedName: System.IO.FileInfo
        isExternal: true
    isDefinition: true
    parent: System.IO
    commentId: T:System.IO.FileInfo
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo*
        name: GetFileInfo
        nameWithType: IFtpFilesystem.GetFileInfo
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo*
        name: GetFileInfo
        nameWithType: IFtpFilesystem.GetFileInfo
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo
  System.IO.FileStream:
    name:
      CSharp:
      - id: System.IO.FileStream
        name: FileStream
        nameWithType: FileStream
        qualifiedName: System.IO.FileStream
        isExternal: true
      VB:
      - id: System.IO.FileStream
        name: FileStream
        nameWithType: FileStream
        qualifiedName: System.IO.FileStream
        isExternal: true
    isDefinition: true
    parent: System.IO
    commentId: T:System.IO.FileStream
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream*
        name: GetFileStream
        nameWithType: IFtpFilesystem.GetFileStream
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream*
        name: GetFileStream
        nameWithType: IFtpFilesystem.GetFileStream
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions*
        name: GetFilePermissions
        nameWithType: IFtpFilesystem.GetFilePermissions
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions*
        name: GetFilePermissions
        nameWithType: IFtpFilesystem.GetFilePermissions
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions*
        name: GetDirectoryPermissions
        nameWithType: IFtpFilesystem.GetDirectoryPermissions
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions*
        name: GetDirectoryPermissions
        nameWithType: IFtpFilesystem.GetDirectoryPermissions
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile*
        name: DeleteFile
        nameWithType: IFtpFilesystem.DeleteFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile*
        name: DeleteFile
        nameWithType: IFtpFilesystem.DeleteFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory*
        name: DeleteDirectory
        nameWithType: IFtpFilesystem.DeleteDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory*
        name: DeleteDirectory
        nameWithType: IFtpFilesystem.DeleteDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory*
        name: CreateDirectory
        nameWithType: IFtpFilesystem.CreateDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory*
        name: CreateDirectory
        nameWithType: IFtpFilesystem.CreateDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile*
        name: CreateFile
        nameWithType: IFtpFilesystem.CreateFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile*
        name: CreateFile
        nameWithType: IFtpFilesystem.CreateFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory*
        name: MoveDirectory
        nameWithType: IFtpFilesystem.MoveDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory*
        name: MoveDirectory
        nameWithType: IFtpFilesystem.MoveDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile*
        name: MoveFile
        nameWithType: IFtpFilesystem.MoveFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile*
        name: MoveFile
        nameWithType: IFtpFilesystem.MoveFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile
  DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem*
        name: Filesystem
        nameWithType: IFtpIdentity.Filesystem
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem*
        name: Filesystem
        nameWithType: IFtpIdentity.Filesystem
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem
  System.Net.Sockets.TcpListener:
    name:
      CSharp:
      - id: System.Net.Sockets.TcpListener
        name: TcpListener
        nameWithType: TcpListener
        qualifiedName: System.Net.Sockets.TcpListener
        isExternal: true
      VB:
      - id: System.Net.Sockets.TcpListener
        name: TcpListener
        nameWithType: TcpListener
        qualifiedName: System.Net.Sockets.TcpListener
        isExternal: true
    isDefinition: true
    parent: System.Net.Sockets
    commentId: T:System.Net.Sockets.TcpListener
  DouglasDwyer.ExtensibleFtp.PassiveDataConnector.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.#ctor*
        name: PassiveDataConnector
        nameWithType: PassiveDataConnector.PassiveDataConnector
        qualifiedName: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.PassiveDataConnector
      VB:
      - id: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.#ctor*
        name: PassiveDataConnector
        nameWithType: PassiveDataConnector.PassiveDataConnector
        qualifiedName: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.PassiveDataConnector
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.PassiveDataConnector.#ctor
  DouglasDwyer.ExtensibleFtp.PassiveDataConnector.CreateDataConnectionAsync*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.CreateDataConnectionAsync*
        name: CreateDataConnectionAsync
        nameWithType: PassiveDataConnector.CreateDataConnectionAsync
        qualifiedName: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.CreateDataConnectionAsync
      VB:
      - id: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.CreateDataConnectionAsync*
        name: CreateDataConnectionAsync
        nameWithType: PassiveDataConnector.CreateDataConnectionAsync
        qualifiedName: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.CreateDataConnectionAsync
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.PassiveDataConnector.CreateDataConnectionAsync
  DouglasDwyer.ExtensibleFtp.PassiveDataConnector.Dispose*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.Dispose*
        name: Dispose
        nameWithType: PassiveDataConnector.Dispose
        qualifiedName: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.Dispose
      VB:
      - id: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.Dispose*
        name: Dispose
        nameWithType: PassiveDataConnector.Dispose
        qualifiedName: DouglasDwyer.ExtensibleFtp.PassiveDataConnector.Dispose
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.PassiveDataConnector.Dispose
  DouglasDwyer.ExtensibleFtp.PassiveDataConnector:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.PassiveDataConnector
        name: PassiveDataConnector
        nameWithType: PassiveDataConnector
        qualifiedName: DouglasDwyer.ExtensibleFtp.PassiveDataConnector
      VB:
      - id: DouglasDwyer.ExtensibleFtp.PassiveDataConnector
        name: PassiveDataConnector
        nameWithType: PassiveDataConnector
        qualifiedName: DouglasDwyer.ExtensibleFtp.PassiveDataConnector
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.PassiveDataConnector
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.RootDirectory*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.RootDirectory*
        name: RootDirectory
        nameWithType: AnonymousAuthenticator.RootDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.RootDirectory
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.RootDirectory*
        name: RootDirectory
        nameWithType: AnonymousAuthenticator.RootDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.RootDirectory
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.RootDirectory
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator
        name: AnonymousAuthenticator
        nameWithType: AnonymousAuthenticator
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator
        name: AnonymousAuthenticator
        nameWithType: AnonymousAuthenticator
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.#ctor*
        name: AnonymousAuthenticator
        nameWithType: AnonymousAuthenticator.AnonymousAuthenticator
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AnonymousAuthenticator
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.#ctor*
        name: AnonymousAuthenticator
        nameWithType: AnonymousAuthenticator.AnonymousAuthenticator
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AnonymousAuthenticator
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.#ctor
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AuthenticateUser*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AuthenticateUser*
        name: AuthenticateUser
        nameWithType: AnonymousAuthenticator.AuthenticateUser
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AuthenticateUser
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AuthenticateUser*
        name: AuthenticateUser
        nameWithType: AnonymousAuthenticator.AuthenticateUser
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AuthenticateUser
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousAuthenticator.AuthenticateUser
  DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser(System.String,System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser(System.String,System.String)
        name: AuthenticateUser
        nameWithType: IFtpAuthenticator.AuthenticateUser
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser(System.String,System.String)
        name: AuthenticateUser
        nameWithType: IFtpAuthenticator.AuthenticateUser
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpAuthenticator
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpAuthenticator.AuthenticateUser(System.String,System.String)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.RootDirectory*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.RootDirectory*
        name: RootDirectory
        nameWithType: AnonymousFilesystem.RootDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.RootDirectory
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.RootDirectory*
        name: RootDirectory
        nameWithType: AnonymousFilesystem.RootDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.RootDirectory
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.RootDirectory
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem
        name: AnonymousFilesystem
        nameWithType: AnonymousFilesystem
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem
        name: AnonymousFilesystem
        nameWithType: AnonymousFilesystem
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.#ctor*
        name: AnonymousFilesystem
        nameWithType: AnonymousFilesystem.AnonymousFilesystem
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.AnonymousFilesystem
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.#ctor*
        name: AnonymousFilesystem
        nameWithType: AnonymousFilesystem.AnonymousFilesystem
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.AnonymousFilesystem
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.#ctor
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DirectoryExists*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DirectoryExists*
        name: DirectoryExists
        nameWithType: AnonymousFilesystem.DirectoryExists
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DirectoryExists
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DirectoryExists*
        name: DirectoryExists
        nameWithType: AnonymousFilesystem.DirectoryExists
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DirectoryExists
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DirectoryExists
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists(System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists(System.String)
        name: DirectoryExists
        nameWithType: IFtpFilesystem.DirectoryExists
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists(System.String)
        name: DirectoryExists
        nameWithType: IFtpFilesystem.DirectoryExists
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DirectoryExists(System.String)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.FileExists*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.FileExists*
        name: FileExists
        nameWithType: AnonymousFilesystem.FileExists
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.FileExists
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.FileExists*
        name: FileExists
        nameWithType: AnonymousFilesystem.FileExists
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.FileExists
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.FileExists
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists(System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists(System.String)
        name: FileExists
        nameWithType: IFtpFilesystem.FileExists
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists(System.String)
        name: FileExists
        nameWithType: IFtpFilesystem.FileExists
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.FileExists(System.String)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFiles*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFiles*
        name: GetFiles
        nameWithType: AnonymousFilesystem.GetFiles
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFiles
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFiles*
        name: GetFiles
        nameWithType: AnonymousFilesystem.GetFiles
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFiles
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFiles
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles(System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles(System.String)
        name: GetFiles
        nameWithType: IFtpFilesystem.GetFiles
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles(System.String)
        name: GetFiles
        nameWithType: IFtpFilesystem.GetFiles
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFiles(System.String)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetSubdirectories*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetSubdirectories*
        name: GetSubdirectories
        nameWithType: AnonymousFilesystem.GetSubdirectories
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetSubdirectories
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetSubdirectories*
        name: GetSubdirectories
        nameWithType: AnonymousFilesystem.GetSubdirectories
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetSubdirectories
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetSubdirectories
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories(System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories(System.String)
        name: GetSubdirectories
        nameWithType: IFtpFilesystem.GetSubdirectories
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories(System.String)
        name: GetSubdirectories
        nameWithType: IFtpFilesystem.GetSubdirectories
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetSubdirectories(System.String)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryInfo*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryInfo*
        name: GetDirectoryInfo
        nameWithType: AnonymousFilesystem.GetDirectoryInfo
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryInfo
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryInfo*
        name: GetDirectoryInfo
        nameWithType: AnonymousFilesystem.GetDirectoryInfo
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryInfo
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryInfo
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo(System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo(System.String)
        name: GetDirectoryInfo
        nameWithType: IFtpFilesystem.GetDirectoryInfo
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo(System.String)
        name: GetDirectoryInfo
        nameWithType: IFtpFilesystem.GetDirectoryInfo
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryInfo(System.String)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileInfo*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileInfo*
        name: GetFileInfo
        nameWithType: AnonymousFilesystem.GetFileInfo
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileInfo
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileInfo*
        name: GetFileInfo
        nameWithType: AnonymousFilesystem.GetFileInfo
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileInfo
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileInfo
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo(System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo(System.String)
        name: GetFileInfo
        nameWithType: IFtpFilesystem.GetFileInfo
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo(System.String)
        name: GetFileInfo
        nameWithType: IFtpFilesystem.GetFileInfo
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileInfo(System.String)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileStream*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileStream*
        name: GetFileStream
        nameWithType: AnonymousFilesystem.GetFileStream
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileStream
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileStream*
        name: GetFileStream
        nameWithType: AnonymousFilesystem.GetFileStream
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileStream
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFileStream
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream(System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream(System.String)
        name: GetFileStream
        nameWithType: IFtpFilesystem.GetFileStream
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream(System.String)
        name: GetFileStream
        nameWithType: IFtpFilesystem.GetFileStream
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFileStream(System.String)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFilePermissions*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFilePermissions*
        name: GetFilePermissions
        nameWithType: AnonymousFilesystem.GetFilePermissions
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFilePermissions
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFilePermissions*
        name: GetFilePermissions
        nameWithType: AnonymousFilesystem.GetFilePermissions
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFilePermissions
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetFilePermissions
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
        name: GetFilePermissions
        nameWithType: IFtpFilesystem.GetFilePermissions
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DouglasDwyer.ExtensibleFtp.IFtpIdentity
        name: IFtpIdentity
        nameWithType: IFtpIdentity
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpIdentity
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
        name: GetFilePermissions
        nameWithType: IFtpFilesystem.GetFilePermissions
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DouglasDwyer.ExtensibleFtp.IFtpIdentity
        name: IFtpIdentity
        nameWithType: IFtpIdentity
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpIdentity
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetFilePermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryPermissions*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryPermissions*
        name: GetDirectoryPermissions
        nameWithType: AnonymousFilesystem.GetDirectoryPermissions
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryPermissions
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryPermissions*
        name: GetDirectoryPermissions
        nameWithType: AnonymousFilesystem.GetDirectoryPermissions
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryPermissions
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.GetDirectoryPermissions
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
        name: GetDirectoryPermissions
        nameWithType: IFtpFilesystem.GetDirectoryPermissions
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DouglasDwyer.ExtensibleFtp.IFtpIdentity
        name: IFtpIdentity
        nameWithType: IFtpIdentity
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpIdentity
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
        name: GetDirectoryPermissions
        nameWithType: IFtpFilesystem.GetDirectoryPermissions
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: DouglasDwyer.ExtensibleFtp.IFtpIdentity
        name: IFtpIdentity
        nameWithType: IFtpIdentity
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpIdentity
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.GetDirectoryPermissions(System.String,DouglasDwyer.ExtensibleFtp.IFtpIdentity)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteFile*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteFile*
        name: DeleteFile
        nameWithType: AnonymousFilesystem.DeleteFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteFile
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteFile*
        name: DeleteFile
        nameWithType: AnonymousFilesystem.DeleteFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteFile
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteFile
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile(System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile(System.String)
        name: DeleteFile
        nameWithType: IFtpFilesystem.DeleteFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile(System.String)
        name: DeleteFile
        nameWithType: IFtpFilesystem.DeleteFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteFile(System.String)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteDirectory*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteDirectory*
        name: DeleteDirectory
        nameWithType: AnonymousFilesystem.DeleteDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteDirectory
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteDirectory*
        name: DeleteDirectory
        nameWithType: AnonymousFilesystem.DeleteDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteDirectory
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.DeleteDirectory
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory(System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory(System.String)
        name: DeleteDirectory
        nameWithType: IFtpFilesystem.DeleteDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory(System.String)
        name: DeleteDirectory
        nameWithType: IFtpFilesystem.DeleteDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.DeleteDirectory(System.String)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateDirectory*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateDirectory*
        name: CreateDirectory
        nameWithType: AnonymousFilesystem.CreateDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateDirectory
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateDirectory*
        name: CreateDirectory
        nameWithType: AnonymousFilesystem.CreateDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateDirectory
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateDirectory
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory(System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory(System.String)
        name: CreateDirectory
        nameWithType: IFtpFilesystem.CreateDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory(System.String)
        name: CreateDirectory
        nameWithType: IFtpFilesystem.CreateDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateDirectory(System.String)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateFile*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateFile*
        name: CreateFile
        nameWithType: AnonymousFilesystem.CreateFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateFile
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateFile*
        name: CreateFile
        nameWithType: AnonymousFilesystem.CreateFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateFile
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.CreateFile
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile(System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile(System.String)
        name: CreateFile
        nameWithType: IFtpFilesystem.CreateFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile(System.String)
        name: CreateFile
        nameWithType: IFtpFilesystem.CreateFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.CreateFile(System.String)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveDirectory*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveDirectory*
        name: MoveDirectory
        nameWithType: AnonymousFilesystem.MoveDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveDirectory
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveDirectory*
        name: MoveDirectory
        nameWithType: AnonymousFilesystem.MoveDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveDirectory
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveDirectory
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory(System.String,System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory(System.String,System.String)
        name: MoveDirectory
        nameWithType: IFtpFilesystem.MoveDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory(System.String,System.String)
        name: MoveDirectory
        nameWithType: IFtpFilesystem.MoveDirectory
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveDirectory(System.String,System.String)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveFile*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveFile*
        name: MoveFile
        nameWithType: AnonymousFilesystem.MoveFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveFile
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveFile*
        name: MoveFile
        nameWithType: AnonymousFilesystem.MoveFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveFile
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousFilesystem.MoveFile
  DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile(System.String,System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile(System.String,System.String)
        name: MoveFile
        nameWithType: IFtpFilesystem.MoveFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile(System.String,System.String)
        name: MoveFile
        nameWithType: IFtpFilesystem.MoveFile
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpFilesystem
    commentId: M:DouglasDwyer.ExtensibleFtp.IFtpFilesystem.MoveFile(System.String,System.String)
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.Filesystem*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.Filesystem*
        name: Filesystem
        nameWithType: AnonymousIdentity.Filesystem
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.Filesystem
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.Filesystem*
        name: Filesystem
        nameWithType: AnonymousIdentity.Filesystem
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.Filesystem
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.Filesystem
  DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem
        name: Filesystem
        nameWithType: IFtpIdentity.Filesystem
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem
      VB:
      - id: DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem
        name: Filesystem
        nameWithType: IFtpIdentity.Filesystem
        qualifiedName: DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.IFtpIdentity
    commentId: P:DouglasDwyer.ExtensibleFtp.IFtpIdentity.Filesystem
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity
        name: AnonymousIdentity
        nameWithType: AnonymousIdentity
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity
        name: AnonymousIdentity
        nameWithType: AnonymousIdentity
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity
  DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.#ctor*
        name: AnonymousIdentity
        nameWithType: AnonymousIdentity.AnonymousIdentity
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.AnonymousIdentity
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.#ctor*
        name: AnonymousIdentity
        nameWithType: AnonymousIdentity.AnonymousIdentity
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.AnonymousIdentity
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Anonymous.AnonymousIdentity.#ctor
  DouglasDwyer.ExtensibleFtp.Anonymous:
    name:
      CSharp:
      - name: DouglasDwyer.ExtensibleFtp.Anonymous
        nameWithType: DouglasDwyer.ExtensibleFtp.Anonymous
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous
      VB:
      - name: DouglasDwyer.ExtensibleFtp.Anonymous
        nameWithType: DouglasDwyer.ExtensibleFtp.Anonymous
        qualifiedName: DouglasDwyer.ExtensibleFtp.Anonymous
    isDefinition: true
    commentId: N:DouglasDwyer.ExtensibleFtp.Anonymous
  DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
        name: CommandName
        nameWithType: FtpCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
        name: CommandName
        nameWithType: FtpCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.FtpCommand
    commentId: P:DouglasDwyer.ExtensibleFtp.FtpCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.CommandName*
        name: CommandName
        nameWithType: CwdCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.CommandName*
        name: CommandName
        nameWithType: CwdCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.CommandName
  DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String):
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
        name: Execute
        nameWithType: FtpCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        name: ExtensibleFtpUser
        nameWithType: ExtensibleFtpUser
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
        name: Execute
        nameWithType: FtpCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.FtpCommand.Execute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
        name: ExtensibleFtpUser
        nameWithType: ExtensibleFtpUser
        qualifiedName: DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.ExtensibleFtp.FtpCommand
    commentId: M:DouglasDwyer.ExtensibleFtp.FtpCommand.Execute(DouglasDwyer.ExtensibleFtp.ExtensibleFtpUser,System.String)
  DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.Execute*
        name: Execute
        nameWithType: CwdCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.Execute*
        name: Execute
        nameWithType: CwdCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.CwdCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.CwdCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand
        name: CwdCommand
        nameWithType: CwdCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand
        name: CwdCommand
        nameWithType: CwdCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.CwdCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.CwdCommand
  DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.CommandName*
        name: CommandName
        nameWithType: DeleCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.CommandName*
        name: CommandName
        nameWithType: DeleCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.Execute*
        name: Execute
        nameWithType: DeleCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.Execute*
        name: Execute
        nameWithType: DeleCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.DeleCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.DeleCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand
        name: DeleCommand
        nameWithType: DeleCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand
        name: DeleCommand
        nameWithType: DeleCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.DeleCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.DeleCommand
  DouglasDwyer.ExtensibleFtp.Commands.ListCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.CommandName*
        name: CommandName
        nameWithType: ListCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.CommandName*
        name: CommandName
        nameWithType: ListCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.ListCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.ListCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.Execute*
        name: Execute
        nameWithType: ListCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.Execute*
        name: Execute
        nameWithType: ListCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.ListCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.ListCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.ListCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.ListCommand
        name: ListCommand
        nameWithType: ListCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.ListCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.ListCommand
        name: ListCommand
        nameWithType: ListCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.ListCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.ListCommand
  DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.CommandName*
        name: CommandName
        nameWithType: MkdCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.CommandName*
        name: CommandName
        nameWithType: MkdCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.Execute*
        name: Execute
        nameWithType: MkdCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.Execute*
        name: Execute
        nameWithType: MkdCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.MkdCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.MkdCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand
        name: MkdCommand
        nameWithType: MkdCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand
        name: MkdCommand
        nameWithType: MkdCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.MkdCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.MkdCommand
  DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.CommandName*
        name: CommandName
        nameWithType: NoOpCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.CommandName*
        name: CommandName
        nameWithType: NoOpCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.Execute*
        name: Execute
        nameWithType: NoOpCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.Execute*
        name: Execute
        nameWithType: NoOpCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand
        name: NoOpCommand
        nameWithType: NoOpCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand
        name: NoOpCommand
        nameWithType: NoOpCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.NoOpCommand
  DouglasDwyer.ExtensibleFtp.Commands.PassCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.CommandName*
        name: CommandName
        nameWithType: PassCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.CommandName*
        name: CommandName
        nameWithType: PassCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.PassCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.PassCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.Execute*
        name: Execute
        nameWithType: PassCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.Execute*
        name: Execute
        nameWithType: PassCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PassCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.PassCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.PassCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PassCommand
        name: PassCommand
        nameWithType: PassCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PassCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PassCommand
        name: PassCommand
        nameWithType: PassCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PassCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.PassCommand
  DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.CommandName*
        name: CommandName
        nameWithType: PasvCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.CommandName*
        name: CommandName
        nameWithType: PasvCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.Execute*
        name: Execute
        nameWithType: PasvCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.Execute*
        name: Execute
        nameWithType: PasvCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.PasvCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.PasvCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand
        name: PasvCommand
        nameWithType: PasvCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand
        name: PasvCommand
        nameWithType: PasvCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PasvCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.PasvCommand
  DouglasDwyer.ExtensibleFtp.Commands.PortCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.CommandName*
        name: CommandName
        nameWithType: PortCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.CommandName*
        name: CommandName
        nameWithType: PortCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.PortCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.PortCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.Execute*
        name: Execute
        nameWithType: PortCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.Execute*
        name: Execute
        nameWithType: PortCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PortCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.PortCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.PortCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PortCommand
        name: PortCommand
        nameWithType: PortCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PortCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PortCommand
        name: PortCommand
        nameWithType: PortCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PortCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.PortCommand
  DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.CommandName*
        name: CommandName
        nameWithType: PwdCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.CommandName*
        name: CommandName
        nameWithType: PwdCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.Execute*
        name: Execute
        nameWithType: PwdCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.Execute*
        name: Execute
        nameWithType: PwdCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.PwdCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.PwdCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand
        name: PwdCommand
        nameWithType: PwdCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand
        name: PwdCommand
        nameWithType: PwdCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.PwdCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.PwdCommand
  DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.CommandName*
        name: CommandName
        nameWithType: QuitCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.CommandName*
        name: CommandName
        nameWithType: QuitCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.Execute*
        name: Execute
        nameWithType: QuitCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.Execute*
        name: Execute
        nameWithType: QuitCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.QuitCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.QuitCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand
        name: QuitCommand
        nameWithType: QuitCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand
        name: QuitCommand
        nameWithType: QuitCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.QuitCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.QuitCommand
  DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.CommandName*
        name: CommandName
        nameWithType: RetrCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.CommandName*
        name: CommandName
        nameWithType: RetrCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.Execute*
        name: Execute
        nameWithType: RetrCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.Execute*
        name: Execute
        nameWithType: RetrCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.RetrCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.RetrCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand
        name: RetrCommand
        nameWithType: RetrCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand
        name: RetrCommand
        nameWithType: RetrCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RetrCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.RetrCommand
  DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.CommandName*
        name: CommandName
        nameWithType: RmdaCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.CommandName*
        name: CommandName
        nameWithType: RmdaCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.Execute*
        name: Execute
        nameWithType: RmdaCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.Execute*
        name: Execute
        nameWithType: RmdaCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand
        name: RmdaCommand
        nameWithType: RmdaCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand
        name: RmdaCommand
        nameWithType: RmdaCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.RmdaCommand
  DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.CommandName*
        name: CommandName
        nameWithType: RmdCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.CommandName*
        name: CommandName
        nameWithType: RmdCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.Execute*
        name: Execute
        nameWithType: RmdCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.Execute*
        name: Execute
        nameWithType: RmdCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.RmdCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.RmdCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand
        name: RmdCommand
        nameWithType: RmdCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand
        name: RmdCommand
        nameWithType: RmdCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RmdCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.RmdCommand
  DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.CommandName*
        name: CommandName
        nameWithType: RnfrCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.CommandName*
        name: CommandName
        nameWithType: RnfrCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.Execute*
        name: Execute
        nameWithType: RnfrCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.Execute*
        name: Execute
        nameWithType: RnfrCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand
        name: RnfrCommand
        nameWithType: RnfrCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand
        name: RnfrCommand
        nameWithType: RnfrCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.RnfrCommand
  DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.CommandName*
        name: CommandName
        nameWithType: RntoCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.CommandName*
        name: CommandName
        nameWithType: RntoCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.Execute*
        name: Execute
        nameWithType: RntoCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.Execute*
        name: Execute
        nameWithType: RntoCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.RntoCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.RntoCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand
        name: RntoCommand
        nameWithType: RntoCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand
        name: RntoCommand
        nameWithType: RntoCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.RntoCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.RntoCommand
  DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.CommandName*
        name: CommandName
        nameWithType: SizeCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.CommandName*
        name: CommandName
        nameWithType: SizeCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.Execute*
        name: Execute
        nameWithType: SizeCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.Execute*
        name: Execute
        nameWithType: SizeCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.SizeCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.SizeCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand
        name: SizeCommand
        nameWithType: SizeCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand
        name: SizeCommand
        nameWithType: SizeCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.SizeCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.SizeCommand
  DouglasDwyer.ExtensibleFtp.Commands.StorCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.CommandName*
        name: CommandName
        nameWithType: StorCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.CommandName*
        name: CommandName
        nameWithType: StorCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.StorCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.StorCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.Execute*
        name: Execute
        nameWithType: StorCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.Execute*
        name: Execute
        nameWithType: StorCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.StorCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.StorCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.StorCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.StorCommand
        name: StorCommand
        nameWithType: StorCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.StorCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.StorCommand
        name: StorCommand
        nameWithType: StorCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.StorCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.StorCommand
  DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.CommandName*
        name: CommandName
        nameWithType: TypeCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.CommandName*
        name: CommandName
        nameWithType: TypeCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.Execute*
        name: Execute
        nameWithType: TypeCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.Execute*
        name: Execute
        nameWithType: TypeCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.TypeCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.TypeCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand
        name: TypeCommand
        nameWithType: TypeCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand
        name: TypeCommand
        nameWithType: TypeCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.TypeCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.TypeCommand
  DouglasDwyer.ExtensibleFtp.Commands.UserCommand.CommandName*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.CommandName*
        name: CommandName
        nameWithType: UserCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.CommandName
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.CommandName*
        name: CommandName
        nameWithType: UserCommand.CommandName
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.CommandName
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.UserCommand.CommandName
  DouglasDwyer.ExtensibleFtp.Commands.UserCommand.Execute*:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.Execute*
        name: Execute
        nameWithType: UserCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.Execute
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.Execute*
        name: Execute
        nameWithType: UserCommand.Execute
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.UserCommand.Execute
    isDefinition: true
    commentId: Overload:DouglasDwyer.ExtensibleFtp.Commands.UserCommand.Execute
  DouglasDwyer.ExtensibleFtp.Commands.UserCommand:
    name:
      CSharp:
      - id: DouglasDwyer.ExtensibleFtp.Commands.UserCommand
        name: UserCommand
        nameWithType: UserCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.UserCommand
      VB:
      - id: DouglasDwyer.ExtensibleFtp.Commands.UserCommand
        name: UserCommand
        nameWithType: UserCommand
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands.UserCommand
    isDefinition: true
    commentId: T:DouglasDwyer.ExtensibleFtp.Commands.UserCommand
  DouglasDwyer.ExtensibleFtp.Commands:
    name:
      CSharp:
      - name: DouglasDwyer.ExtensibleFtp.Commands
        nameWithType: DouglasDwyer.ExtensibleFtp.Commands
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands
      VB:
      - name: DouglasDwyer.ExtensibleFtp.Commands
        nameWithType: DouglasDwyer.ExtensibleFtp.Commands
        qualifiedName: DouglasDwyer.ExtensibleFtp.Commands
    isDefinition: true
    commentId: N:DouglasDwyer.ExtensibleFtp.Commands
